{"version":3,"file":"static/js/2775.8991b4dd.chunk.js","mappings":"sOAGaA,EAAU,SAAC,GAQjB,IAPLC,EAOI,EAPJA,QACAC,EAMI,EANJA,SACAC,EAKI,EALJA,OACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,MACAC,EACI,EADJA,IAEA,OACE,UAAC,EAAAC,SAAD,CAAUJ,SAAUA,EAAUK,UAAU,SAAxC,WACE,UAAC,EAAAC,aAAD,CACEC,UAAU,kBACVC,QAAS,kBAAMX,EAAQI,EAAMC,EAApB,EAFX,WAIE,qCACA,cAAGK,UAAU,iBAEf,UAAC,EAAAD,aAAD,CAAcC,UAAU,kBAAxB,WACE,uCACA,cAAGA,UAAU,qBAEf,UAAC,EAAAD,aAAD,CAAcC,UAAU,kBAAkBC,QAAS,kBAAMT,EAAOI,EAAb,EAAnD,WACE,oCACA,cAAGI,UAAU,gBAEf,UAAC,EAAAD,aAAD,CACEC,UAAU,kBACVC,QAAS,kBAAMV,EAASG,EAAMC,EAArB,EAFX,WAIE,sCACA,cAAGK,UAAU,kBAIpB,C,wHChCYE,EAAW,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWV,EAAwB,EAAxBA,SAAUQ,EAAc,EAAdA,QAC9C,OACE,SAAC,EAAAJ,SAAD,CACEJ,SAAUA,EACVO,UAAWI,EAAAA,QAAAA,UACXN,UAAU,eAHZ,SAKGK,EAAUE,KAAI,SAACC,EAAUC,GACxB,OACE,SAAC,EAAAR,aAAD,CACEC,UAAWI,EAAAA,QAAAA,QAEXH,QAAS,kBAAMA,EAAQK,EAAd,EAHX,UAKE,gBACEE,GAAIF,EACJG,KAAKC,EAAAA,EAAAA,gBAAeJ,GACpBK,QAAQ,OACRC,IAAI,MAPDL,EAWV,KAGN,C,0HCgFD,UAxGsB,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,MAAOkB,EAAiB,EAAjBA,WAC9B,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOX,EAAP,KAAkBY,EAAlB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwBH,EAAAA,EAAAA,YAAxB,eAAaI,GAAb,WACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,MAIAC,EAAAA,EAAAA,YAAU,WACH1B,GACL2B,GACD,GAAE,CAAC3B,IAEJ,IAAM2B,EAAW,yCAAG,wGACdC,EAAS,CACXC,KAAM,EACNC,MAVQ,IAOQ,kBAaNC,QAAQC,IAAI,EACpBC,EAAAA,EAAAA,cAAajC,IACbkC,EAAAA,EAAAA,oBAAmBlC,EAAO4B,KAfZ,+BAQEjB,EARF,KAQZwB,KAAQA,KAGMC,EAXF,KAWZD,KAAQA,KAMZf,EAAaT,GACbW,EAASc,GAlBO,mDAoBhBC,EAAAA,EAAAA,OAAM,CAAEC,KAAM,QAASC,QAAO,OAAC,EAAD,yBAAE,KAAOA,UApBvB,yBAsBhBd,GAAU,GAtBM,6EAAH,qDA0BXe,EAAe,yCAAG,WAAO7B,GAAP,uFAClBiB,EAAS,CACXC,KAAM,EACNC,MApCQ,GAqCRQ,KAAM3B,GAJc,mBASVuB,EAAAA,EAAAA,oBAAmBlC,EAAO4B,GAThB,gBAQVO,EARU,EAQlBA,KAAQA,KAEVZ,EAAQZ,GACRW,EAASa,GAXW,mDAapBE,EAAAA,EAAAA,OAAM,CAAEC,KAAM,QAASC,QAAO,OAAC,EAAD,yBAAE,KAAOA,UAbnB,0DAAH,sDAsBrB,OACE,SAAC,EAAAE,MAAD,CAAOjB,OAAQA,EAAQkB,OANV,WACbxB,IACAO,GAAU,EACX,EAGC,UACE,iBAAKpB,UAAWI,EAAAA,QAAAA,MAAhB,WACE,iBAAKJ,UAAWI,EAAAA,QAAAA,UAAhB,WACE,gBAAKJ,UAAWI,EAAAA,QAAAA,IAAYH,QAAS,kBAAMkC,GAAN,EAArC,UACE,oCAFJ,OAIGhC,QAJH,IAIGA,OAJH,EAIGA,EAAWE,KAAI,WAAsBE,GAAW,IAA9BD,EAA6B,EAA7BA,SAAUgC,EAAmB,EAAnBA,MAC3B,OACE,iBAEEtC,UAAWI,EAAAA,QAAAA,KACXH,QAAS,kBAAMkC,EAAgB7B,EAAtB,EAHX,WAKE,gBAAKG,KAAKC,EAAAA,EAAAA,gBAAeJ,GAAWK,QAAQ,OAAOC,IAAI,MACvD,0BAAO0B,MALF/B,EAQV,QAEH,gBAAKP,UAAWI,EAAAA,QAAAA,MAAhB,SACGY,EAAMX,KACL,WAAwDE,GAAW,IAAhEgC,EAA+D,EAA/DA,OAAeC,GAAgD,EAAvDC,MAAuD,EAAhDD,KAAKE,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,OAAcC,GAAuB,EAA7BlD,KAA6B,EAAvBkD,WACzC,OACE,iBAAiB5C,UAAWI,EAAAA,QAAAA,KAA5B,WACE,SAAC,EAAAyC,OAAD,CACEH,KAAMA,EACNI,KAAM,GACNH,OAAQA,EACRI,OAAQP,EACR/B,IAAK8B,GAAUK,KAEjB,0BAAOF,MARCnC,EAWb,UAMZ,C,gHCzCD,UA9DkB,SAAC,GAA2B,IAAzBM,EAAwB,EAAxBA,WAAYlB,EAAY,EAAZA,MAC/B,GAA0BmB,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAKK,EAAL,KAAaC,EAAb,MAIAC,EAAAA,EAAAA,YAAU,WACH1B,GACLqD,EAAS,GAAGC,SAAQ,kBAAM7B,GAAU,EAAhB,GACrB,GAAE,CAACzB,IAEJ,IAAMqD,EAAQ,yCAAG,WAAOxB,GAAP,uFACXD,EAAS,CACXC,KAAAA,EACAC,MAVQ,IAOK,mBAQHyB,EAAAA,EAAAA,gBAAevD,EAAO4B,GARnB,gBAOHO,EAPG,EAOXA,KAAQA,KAEVb,EAASa,GATI,iDAWbE,EAAAA,EAAAA,OAAM,CAAEC,KAAM,QAASC,QAAO,OAAC,EAAD,yBAAE,KAAOA,UAX1B,yDAAH,sDAoBd,OACE,SAAC,EAAAE,MAAD,CAAOjB,OAAQA,EAAQkB,OANV,WACbxB,IACAO,GAAU,EACX,EAGC,UACE,iBAAKpB,UAAWI,EAAAA,QAAAA,MAAhB,WACE,gBAAKJ,UAAWI,EAAAA,QAAAA,UAAhB,UACE,gBAAKJ,UAAWI,EAAAA,QAAAA,IAAhB,UACE,wCAGJ,gBAAKJ,UAAWI,EAAAA,QAAAA,MAAhB,SACGY,EAAMX,KACL,WAAwDE,GAAW,IAAhEgC,EAA+D,EAA/DA,OAAeC,GAAgD,EAAvDC,MAAuD,EAAhDD,KAAKE,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,OAAcC,GAAuB,EAA7BlD,KAA6B,EAAvBkD,WACzC,OACE,iBAAiB5C,UAAWI,EAAAA,QAAAA,KAA5B,WACE,SAAC,EAAAyC,OAAD,CACEH,KAAMA,EACNI,KAAM,GACNH,OAAQA,EACRI,OAAQP,EACR/B,IAAK8B,GAAUK,KAEjB,0BAAOF,MARCnC,EAWb,UAMZ,C,2MCxDY4C,EAAe,SAAC,GAWtB,IAVLC,EAUI,EAVJA,MACA7D,EASI,EATJA,SACAC,EAQI,EARJA,OACAF,EAOI,EAPJA,QACAyD,EAMI,EANJA,OACAM,EAKI,EALJA,aACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,aACAC,EACI,EADJA,eAEA,GAAwC3C,EAAAA,EAAAA,YAAxC,eAAK4C,EAAL,KAAoBC,EAApB,KACA,GAAgC7C,EAAAA,EAAAA,YAAhC,eAAK8C,EAAL,KAAgBC,EAAhB,KAEA,OACE,UAAC,EAAAC,SAAD,WACGV,EAAM/C,KAAI,WAAoB0D,GAAS,IAA1BC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,SACjB,OACE,UAAC,EAAAH,SAAD,YACE,gBAAK9D,UAAWI,EAAAA,QAAAA,KAAhB,UACE,0BAAO8D,IAAOF,GAAKG,OAAO,oBAE5B,gBAAKnE,UAAWI,EAAAA,QAAAA,UAAkBG,MAAOwD,EAAzC,SACGE,EAAS5D,KAAI,SAAC6B,EAAS3B,GACtB,IACEX,EAQEsC,EARFtC,IACAF,EAOEwC,EAPFxC,KAFF,EASIwC,EANFkC,OAAcC,GAHhB,aAGsD,CAAC,EAHvD,GAGY7D,GAAckC,EAH1B,EAG0BA,KAAcE,GAHxC,EAGgCL,OAHhC,EAGwCK,WACtCJ,EAKEN,EALFM,IACA8B,EAIEpC,EAJFoC,KALF,EASIpC,EAHFqC,MAAAA,OANF,MAMU,KANV,EAOEpE,EAEE+B,EAFF/B,UACAqE,EACEtC,EADFsC,eAGF,OACE,UAAC,EAAAV,SAAD,WACGR,EAAU9C,IAAM8C,EAAU9C,KAAOgC,IAChC,gBAAKxC,UAAWI,EAAAA,QAAAA,WAAhB,UACE,4BACGkD,EAAUhB,MADb,kBAEGgB,EAAUhB,MAAQ,GAAK,UAI9B,yCACEtC,WAAWyE,EAAAA,EAAAA,YAAWrE,EAAAA,QAAAA,cAAD,UAClBA,EAAAA,QAAAA,IAAa2C,IAAWsB,IAE3BK,MAAOlC,GACM,IAARuB,GAAuB,IAAVxD,GAAe,CAAEoE,MAAO,KACrCZ,IAAQX,EAAMwB,OAAS,GAC1BrE,IAAU0D,EAASW,OAAS,GAAK,CAAEC,KAAM,KAP7C,eASE,4BACE,iBAAK7E,UAAWI,EAAAA,QAAAA,UAAhB,UACGmE,IACC,gBACEvE,UAAWI,EAAAA,QAAAA,WACXH,QAAS,kBAAMoD,EAAab,EAAK,SAAU+B,EAAlC,EAFX,UAIE,0BAAOA,EAAM3E,SAGjB,iBAAKY,GAAE,mBAAcgC,GAArB,UACGe,GAAec,IAAatB,IAC3B,iBACE+B,MAAO,CAAEC,MAAOnC,GAChB5C,UAAWI,EAAAA,QAAAA,UAFb,SAIGsC,EAAKsC,MAAM,KAAK,MAGrB,0BAAOpF,QAET,iBAAKI,UAAWI,EAAAA,QAAAA,SAAhB,WACE,cAAGJ,UAAS,kBAAaI,EAAAA,QAAAA,UACzB,0BACG8D,IAAO,IAAIe,KAAKvF,IAAOyE,OAAO,YAEhCpB,IAAWsB,IACV,cACErE,UAAS,6BAAwBI,EAAAA,QAAAA,MACjCkE,KAAMA,EAAKY,WACXjF,QAAS,kBAAM4D,EAAarB,EAAnB,WAKjB,gBAAKxC,UAAWI,EAAAA,QAAAA,QAAhB,UACE,cACEJ,UAAU,2BACVQ,GAAE,iBAAYgC,UAInBgC,EAAiB,IAChB,iBACExE,UAAWI,EAAAA,QAAAA,UACXH,QAAS,kBAAM0D,EAAiBnB,EAAvB,EAFX,UAIG2C,OAAOC,KAAKjF,GAAWE,KAAI,SAACC,EAAU+E,GACrC,OACE,gBAEE5E,KAAKC,EAAAA,EAAAA,gBAAeJ,GACpBK,QAAQ,OACRC,IAAI,IAHCyE,EAMV,KACD,0BAAOb,YAIb,SAAC,EAAAnF,QAAD,CACEI,SAAQ,kBAAa+C,GACrBhD,OAAQA,EACRF,QAAS,kBAAMA,EAAQ4C,EAAd,EACT3C,SAAUA,EACVG,KAAMA,EACNC,MAAO6C,EACP5C,IAAKA,KAEP,SAAC,EAAAM,SAAD,CACET,SAAQ,oBAAe+C,GACvBrC,UAAWqD,EACXvD,QAAS,SAACK,GAAD,OAAcmD,EAAenD,EAAUkC,EAAKuB,EAA5C,MA3FEvB,EA+FlB,QAjHUuB,EAqHlB,KACD,SAAC,UAAD,CAAepE,MAAO+D,EAAe7C,WAAY8C,KACjD,SAAC,UAAD,CAAWhE,MAAOiE,EAAW/C,WAAYgD,MAG9C,C,gNCpJYyB,EAAgB,SAACC,EAAQzD,GACpC,OAAO0D,EAAAA,EAAAA,OAAM,CACXC,IAAI,GAAD,OAAKC,EAAAA,UAAAA,QAAAA,cAAL,YAAwCH,GAC3CI,OAAQ,OACR7D,KAAAA,GAEH,EAEYF,EAAe,SAACjC,GAC3B,OAAO6F,EAAAA,EAAAA,OAAM,CACXC,IAAI,GAAD,OAAKC,EAAAA,UAAAA,QAAAA,YAAL,YAAsC/F,GACzCgG,OAAQ,OAEX,EAEY9D,EAAqB,SAAClC,EAAO4B,GACxC,OAAOiE,EAAAA,EAAAA,OAAM,CACXC,IAAI,GAAD,OAAKC,EAAAA,UAAAA,QAAAA,kBAAL,YAA4C/F,GAC/CgG,OAAQ,MACRpE,OAAAA,GAEH,EAEY2B,EAAiB,SAACvD,EAAO4B,GACpC,OAAOiE,EAAAA,EAAAA,OAAM,CACXC,IAAI,GAAD,OAAKC,EAAAA,UAAAA,QAAAA,QAAL,YAAkC/F,GACrCgG,OAAQ,MACRpE,OAAAA,GAEH,C,6GC5BYiE,EAAQI,IAAAA,OAAa,CAAEC,QAAAA,EAAAA,UAEpCL,EAAMM,aAAaC,QAAQC,KACzB,SAACC,GACC,IAEMC,GAFSC,EAAAA,EAAAA,WAEMC,IAAI,cAIzB,OAHIF,IACFD,EAAOI,QAAQC,cAAgBJ,GAE1BD,CACR,IACD,SAACM,GACC,OAAO7E,QAAQ8E,OAAOD,EACvB,IAGHf,EAAMM,aAAaW,SAAST,KAC1B,SAACS,GACC,OAAOA,CACR,IACD,SAACF,GAAW,IAAD,EAIT,OAH8B,MAA1BA,EAAME,SAAS9D,QACjB+D,SAASC,cAAc,IAAIC,YAAY,WAElClF,QAAQ8E,OAAR,OAAeD,QAAf,IAAeA,GAAf,UAAeA,EAAOE,gBAAtB,aAAe,EAAiB3E,KACxC,G,8BC7BH,WAAgB,UAAY,gCAAgC,aAAe,mCAAmC,IAAM,0BAA0B,UAAY,gCAAgC,WAAa,iCAAiC,SAAW,+BAA+B,KAAO,2BAA2B,UAAY,gCAAgC,UAAY,gCAAgC,MAAQ,4BAA4B,QAAU,8BAA8B,KAAO,2BAA2B,WAAa,iCAAiC,QAAU,8BAA8B,KAAO,2B,8BCAvlB,WAAgB,UAAY,4BAA4B,QAAU,0B,8BCAlE,WAAgB,MAAQ,6BAA6B,UAAY,iCAAiC,IAAM,2BAA2B,KAAO,4BAA4B,MAAQ,6B,8BCA9K,WAAgB,MAAQ,yBAAyB,UAAY,6BAA6B,IAAM,uBAAuB,MAAQ,yBAAyB,KAAO,wB","sources":["layouts/AppLayout/Chat/Conversation/Options/index.js","layouts/AppLayout/Chat/Conversation/Reaction/index.js","layouts/AppLayout/Chat/Conversation/ReactionPopup/index.js","layouts/AppLayout/Chat/Conversation/SeenPopup/index.js","layouts/AppLayout/Chat/Conversation/index.js","services/Message.js","services/index.js","webpack://chat-app/./src/layouts/AppLayout/Chat/Conversation/Conversation.module.scss?e9d7","webpack://chat-app/./src/layouts/AppLayout/Chat/Conversation/Reaction/Reaction.module.scss?7ea8","webpack://chat-app/./src/layouts/AppLayout/Chat/Conversation/ReactionPopup/ReactionPopup.module.scss?f2c7","webpack://chat-app/./src/layouts/AppLayout/Chat/Conversation/SeenPopup/SeenPopup.module.scss?c86a"],"sourcesContent":["import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\n\nexport const Options = ({\n  onReply,\n  onDelete,\n  onCopy,\n  selector,\n  date,\n  msgId,\n  msg,\n}) => {\n  return (\n    <DropDown selector={selector} placement=\"bottom\">\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onReply(date, msgId)}\n      >\n        <span>Reply</span>\n        <i className=\"bx-share\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\">\n        <span>Forward</span>\n        <i className=\"bx-share-alt\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\" onClick={() => onCopy(msg)}>\n        <span>Copy</span>\n        <i className=\"bx-copy\"></i>\n      </DropDownItem>\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onDelete(date, msgId)}\n      >\n        <span>Delete</span>\n        <i className=\"bx-trash\"></i>\n      </DropDownItem>\n    </DropDown>\n  );\n};\n","import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\nimport { getReactionUrl } from \"utils\";\n\nimport styles from \"./Reaction.module.scss\";\n\nexport const Reaction = ({ reactions, selector, onClick }) => {\n  return (\n    <DropDown\n      selector={selector}\n      className={styles.container}\n      placement=\"bottom-start\"\n    >\n      {reactions.map((reaction, index) => {\n        return (\n          <DropDownItem\n            className={styles.wrapper}\n            key={index}\n            onClick={() => onClick(reaction)}\n          >\n            <img\n              id={reaction}\n              src={getReactionUrl(reaction)}\n              loading=\"lazy\"\n              alt=\"\"\n            />\n          </DropDownItem>\n        );\n      })}\n    </DropDown>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Avatar, Modal, Toast } from \"components\";\nimport { getReactionUrl } from \"utils\";\nimport { getReactions, getReactionsByType } from \"services/Message\";\n\nimport styles from \"./ReactionPopup.module.scss\";\n\nconst ReactionPopup = ({ msgId, clearMsgId }) => {\n  const [reactions, setReactions] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [type, setType] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n\n  let limit = 25;\n\n  useEffect(() => {\n    if (!msgId) return;\n    getReaction();\n  }, [msgId]);\n\n  const getReaction = async () => {\n    let params = {\n      page: 1,\n      limit,\n    };\n    try {\n      let [\n        {\n          data: { data: reaction },\n        },\n        {\n          data: { data: list },\n        },\n      ] = await Promise.all([\n        getReactions(msgId),\n        getReactionsByType(msgId, params),\n      ]);\n      setReactions(reaction);\n      setUsers(list);\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsOpen(true);\n    }\n  };\n\n  const getReactionList = async (reaction) => {\n    let params = {\n      page: 1,\n      limit,\n      type: reaction,\n    };\n    try {\n      let {\n        data: { data },\n      } = await getReactionsByType(msgId, params);\n      setType(reaction);\n      setUsers(data);\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    }\n  };\n\n  const toggle = () => {\n    clearMsgId();\n    setIsOpen(false);\n  };\n\n  return (\n    <Modal isOpen={isOpen} toggle={toggle}>\n      <div className={styles.popup}>\n        <div className={styles.reactions}>\n          <div className={styles.all} onClick={() => getReactionList()}>\n            <span>All</span>\n          </div>\n          {reactions?.map(({ reaction, total }, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={() => getReactionList(reaction)}\n              >\n                <img src={getReactionUrl(reaction)} loading=\"lazy\" alt=\"\" />\n                <span>{total}</span>\n              </div>\n            );\n          })}\n        </div>\n        <div className={styles.users}>\n          {users.map(\n            ({ avatar, email, _id, name, status, date, colorCode }, index) => {\n              return (\n                <div key={index} className={styles.card}>\n                  <Avatar\n                    name={name}\n                    size={40}\n                    status={status}\n                    userId={_id}\n                    src={avatar || colorCode}\n                  />\n                  <span>{name}</span>\n                </div>\n              );\n            }\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ReactionPopup;\n","import React, { useEffect, useState } from \"react\";\nimport { Avatar, Modal, Toast } from \"components\";\nimport { getSeenByMsgId } from \"services/Message\";\n\nimport styles from \"./SeenPopup.module.scss\";\n\nconst SeenPopup = ({ clearMsgId, msgId }) => {\n  const [users, setUsers] = useState([]);\n  let [isOpen, setIsOpen] = useState(false);\n\n  let limit = 25;\n\n  useEffect(() => {\n    if (!msgId) return;\n    getUsers(1).finally(() => setIsOpen(true));\n  }, [msgId]);\n\n  const getUsers = async (page) => {\n    let params = {\n      page,\n      limit,\n    };\n    try {\n      let {\n        data: { data },\n      } = await getSeenByMsgId(msgId, params);\n      setUsers(data);\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    }\n  };\n\n  const toggle = () => {\n    clearMsgId();\n    setIsOpen(false);\n  };\n\n  return (\n    <Modal isOpen={isOpen} toggle={toggle}>\n      <div className={styles.popup}>\n        <div className={styles.reactions}>\n          <div className={styles.all}>\n            <span>Seen</span>\n          </div>\n        </div>\n        <div className={styles.users}>\n          {users.map(\n            ({ avatar, email, _id, name, status, date, colorCode }, index) => {\n              return (\n                <div key={index} className={styles.card}>\n                  <Avatar\n                    name={name}\n                    size={40}\n                    status={status}\n                    userId={_id}\n                    src={avatar || colorCode}\n                  />\n                  <span>{name}</span>\n                </div>\n              );\n            }\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default SeenPopup;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { classNames, getReactionUrl } from \"utils\";\nimport { Reaction } from \"./Reaction\";\nimport { Options } from \"./Options\";\nimport moment from \"moment\";\n\nimport styles from \"./Conversation.module.scss\";\nimport ReactionPopup from \"./ReactionPopup\";\nimport SeenPopup from \"./SeenPopup\";\n\nexport const Conversation = ({\n  chats,\n  onDelete,\n  onCopy,\n  onReply,\n  userId,\n  focusMsgById,\n  unReadMsg,\n  isGroupChat,\n  reactionList,\n  handleReaction,\n}) => {\n  let [reactionMsgId, setReactionMsgId] = useState();\n  let [seenMsgId, setSeenMsgId] = useState();\n\n  return (\n    <Fragment>\n      {chats.map(({ day, messages }, key) => {\n        return (\n          <Fragment key={key}>\n            <div className={styles.date}>\n              <span>{moment(day).format(\"D MMMM YYYY\")}</span>\n            </div>\n            <div className={styles.container} index={key}>\n              {messages.map((message, index) => {\n                let {\n                  msg,\n                  date,\n                  sender: { id: senderId, name, avatar, colorCode } = {},\n                  _id,\n                  seen,\n                  reply = null,\n                  reactions,\n                  totalReactions,\n                } = message;\n\n                return (\n                  <Fragment key={_id}>\n                    {unReadMsg.id && unReadMsg.id === _id && (\n                      <div className={styles.unread_msg}>\n                        <span>\n                          {unReadMsg.total} Unread Message\n                          {unReadMsg.total > 1 && \"s\"}\n                        </span>\n                      </div>\n                    )}\n                    <div\n                      className={classNames(styles.chat_wrapper, {\n                        [styles.end]: userId === senderId,\n                      })}\n                      msgid={_id}\n                      {...(key === 0 && index === 0 && { first: \"\" })}\n                      {...(key === chats.length - 1 &&\n                        index === messages.length - 1 && { last: \"\" })}\n                    >\n                      <div>\n                        <div className={styles.chat_card}>\n                          {reply && (\n                            <div\n                              className={styles.reply_card}\n                              onClick={() => focusMsgById(_id, \"smooth\", reply)}\n                            >\n                              <span>{reply.msg}</span>\n                            </div>\n                          )}\n                          <div id={`reaction-${_id}`}>\n                            {isGroupChat && senderId !== userId && (\n                              <span\n                                style={{ color: colorCode }}\n                                className={styles.user_name}\n                              >\n                                {name.split(\" \")[0]}\n                              </span>\n                            )}\n                            <span>{msg}</span>\n                          </div>\n                          <div className={styles.msg_time}>\n                            <i className={`bx-time ${styles.clock}`}></i>\n                            <span>\n                              {moment(new Date(date)).format(\"h:mm a\")}\n                            </span>\n                            {userId === senderId && (\n                              <i\n                                className={`bx bx-check-double ${styles.tick}`}\n                                seen={seen.toString()}\n                                onClick={() => setSeenMsgId(_id)}\n                              ></i>\n                            )}\n                          </div>\n                        </div>\n                        <div className={styles.options}>\n                          <i\n                            className=\"bx-dots-vertical-rounded\"\n                            id={`option-${_id}`}\n                          ></i>\n                        </div>\n                      </div>\n                      {totalReactions > 0 && (\n                        <div\n                          className={styles.reactions}\n                          onClick={() => setReactionMsgId(_id)}\n                        >\n                          {Object.keys(reactions).map((reaction, ind) => {\n                            return (\n                              <img\n                                key={ind}\n                                src={getReactionUrl(reaction)}\n                                loading=\"lazy\"\n                                alt=\"\"\n                              />\n                            );\n                          })}\n                          <span>{totalReactions}</span>\n                        </div>\n                      )}\n                    </div>\n                    <Options\n                      selector={`#option-${_id}`}\n                      onCopy={onCopy}\n                      onReply={() => onReply(message)}\n                      onDelete={onDelete}\n                      date={date}\n                      msgId={_id}\n                      msg={msg}\n                    />\n                    <Reaction\n                      selector={`#reaction-${_id}`}\n                      reactions={reactionList}\n                      onClick={(reaction) => handleReaction(reaction, _id, key)}\n                    />\n                  </Fragment>\n                );\n              })}\n            </div>\n          </Fragment>\n        );\n      })}\n      <ReactionPopup msgId={reactionMsgId} clearMsgId={setReactionMsgId} />\n      <SeenPopup msgId={seenMsgId} clearMsgId={setSeenMsgId} />\n    </Fragment>\n  );\n};\n","import { axios } from \"services\";\nimport { endpoints } from \"./config\";\n\nexport const createMessage = (chatId, data) => {\n  return axios({\n    url: `${endpoints.message.createMessage}/${chatId}`,\n    method: \"post\",\n    data,\n  });\n};\n\nexport const getReactions = (msgId) => {\n  return axios({\n    url: `${endpoints.message.getReaction}/${msgId}`,\n    method: \"get\",\n  });\n};\n\nexport const getReactionsByType = (msgId, params) => {\n  return axios({\n    url: `${endpoints.message.getReactionByType}/${msgId}`,\n    method: \"get\",\n    params,\n  });\n};\n\nexport const getSeenByMsgId = (msgId, params) => {\n  return axios({\n    url: `${endpoints.message.getSeen}/${msgId}`,\n    method: \"get\",\n    params,\n  });\n};\n","import Axios from \"axios\";\nimport { cookies } from \"utils\";\nimport { baseURL } from \"./config\";\n\nexport const axios = Axios.create({ baseURL });\n\naxios.interceptors.request.use(\n  (config) => {\n    const cookie = cookies();\n\n    const token = cookie.get(\"auth_token\");\n    if (token) {\n      config.headers.Authorization = token;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      document.dispatchEvent(new CustomEvent(\"logout\"));\n    }\n    return Promise.reject(error?.response?.data);\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Conversation_container__I7CJi\",\"chat_wrapper\":\"Conversation_chat_wrapper__S3O8R\",\"end\":\"Conversation_end__ZMbi5\",\"chat_card\":\"Conversation_chat_card__jz70L\",\"reply_card\":\"Conversation_reply_card__AEy90\",\"msg_time\":\"Conversation_msg_time__wN53F\",\"tick\":\"Conversation_tick__RkyEe\",\"reactions\":\"Conversation_reactions__faDG2\",\"user_name\":\"Conversation_user_name__RDhDd\",\"clock\":\"Conversation_clock__y4n8i\",\"options\":\"Conversation_options__WLSBI\",\"date\":\"Conversation_date__ZfQTB\",\"unread_msg\":\"Conversation_unread_msg__yFItk\",\"section\":\"Conversation_section__wG88I\",\"load\":\"Conversation_load__rqCbg\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Reaction_container__yXj24\",\"wrapper\":\"Reaction_wrapper__m5dkH\"};","// extracted by mini-css-extract-plugin\nexport default {\"popup\":\"ReactionPopup_popup__aIJrS\",\"reactions\":\"ReactionPopup_reactions__GiKWs\",\"all\":\"ReactionPopup_all__Ofebr\",\"card\":\"ReactionPopup_card__i6T3l\",\"users\":\"ReactionPopup_users__zmbBG\"};","// extracted by mini-css-extract-plugin\nexport default {\"popup\":\"SeenPopup_popup__Y4qhk\",\"reactions\":\"SeenPopup_reactions__MG2fO\",\"all\":\"SeenPopup_all__r9B82\",\"users\":\"SeenPopup_users__L5xMC\",\"card\":\"SeenPopup_card__FRfpx\"};"],"names":["Options","onReply","onDelete","onCopy","selector","date","msgId","msg","DropDown","placement","DropDownItem","className","onClick","Reaction","reactions","styles","map","reaction","index","id","src","getReactionUrl","loading","alt","clearMsgId","useState","setReactions","users","setUsers","setType","isOpen","setIsOpen","useEffect","getReaction","params","page","limit","Promise","all","getReactions","getReactionsByType","data","list","Toast","type","message","getReactionList","Modal","toggle","total","avatar","_id","email","name","status","colorCode","Avatar","size","userId","getUsers","finally","getSeenByMsgId","Conversation","chats","focusMsgById","unReadMsg","isGroupChat","reactionList","handleReaction","reactionMsgId","setReactionMsgId","seenMsgId","setSeenMsgId","Fragment","key","day","messages","moment","format","sender","senderId","seen","reply","totalReactions","classNames","msgid","first","length","last","style","color","split","Date","toString","Object","keys","ind","createMessage","chatId","axios","url","endpoints","method","Axios","baseURL","interceptors","request","use","config","token","cookies","get","headers","Authorization","error","reject","response","document","dispatchEvent","CustomEvent"],"sourceRoot":""}