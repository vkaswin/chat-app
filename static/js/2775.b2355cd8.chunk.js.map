{"version":3,"file":"static/js/2775.b2355cd8.chunk.js","mappings":"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","sources":["layouts/AppLayout/Chat/Conversation/Options/index.js","layouts/AppLayout/Chat/Conversation/Reaction/index.js","layouts/AppLayout/Chat/Conversation/index.js","webpack://react-chat-app/./src/layouts/AppLayout/Chat/Conversation/Conversation.module.scss?e9d7","webpack://react-chat-app/./src/layouts/AppLayout/Chat/Conversation/Reaction/Reaction.module.scss?7ea8"],"sourcesContent":["import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\n\nexport const Options = ({\n  onReply,\n  onDelete,\n  onCopy,\n  selector,\n  date,\n  msgId,\n  msg,\n}) => {\n  return (\n    <DropDown selector={selector} placement=\"bottom\">\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onReply(date, msgId)}\n      >\n        <span>Reply</span>\n        <i className=\"bx-share\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\">\n        <span>Forward</span>\n        <i className=\"bx-share-alt\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\" onClick={() => onCopy(msg)}>\n        <span>Copy</span>\n        <i className=\"bx-copy\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\">\n        <span>Mark as Unread</span>\n        <i className=\"bx-message-error\"></i>\n      </DropDownItem>\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onDelete(date, msgId)}\n      >\n        <span>Delete</span>\n        <i className=\"bx-trash\"></i>\n      </DropDownItem>\n    </DropDown>\n  );\n};\n","import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\nimport { getReactionUrl } from \"utils\";\n\nimport styles from \"./Reaction.module.scss\";\n\nexport const Reaction = ({ reactions, selector, onClick }) => {\n  return (\n    <DropDown\n      selector={selector}\n      className={styles.container}\n      placement=\"bottom\"\n      zIndex={2000}\n    >\n      {reactions.map((emoji, index) => {\n        return (\n          <DropDownItem\n            className={styles.wrapper}\n            key={index}\n            onClick={() => onClick(emoji)}\n          >\n            <img id={emoji} src={getReactionUrl(emoji)} />\n          </DropDownItem>\n        );\n      })}\n    </DropDown>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport { classNames, getReactionUrl } from \"utils\";\nimport { Reaction } from \"./Reaction\";\nimport { Options } from \"./Options\";\nimport moment from \"moment\";\n\nimport styles from \"./Conversation.module.scss\";\n\nexport const Conversation = ({\n  chats,\n  onDelete,\n  onCopy,\n  onReply,\n  userId,\n  focusMsgById,\n  otherUserId,\n  unReadMsg,\n  isGroupChat,\n  reactionList,\n  handleReaction,\n}) => {\n  return (\n    <Fragment>\n      {chats.map(({ day, messages }, key) => {\n        return (\n          <Fragment key={key}>\n            <div className={styles.date}>\n              <span>{moment(day).format(\"D MMMM YYYY\")}</span>\n            </div>\n            <div className={styles.container}>\n              {messages.map(\n                (\n                  {\n                    msg,\n                    date,\n                    sender: { id = null, name = null, avatar = null } = {},\n                    _id,\n                    seen,\n                    reply = null,\n                    reactions,\n                    totalReactions,\n                  },\n                  index\n                ) => {\n                  return (\n                    <Fragment key={_id}>\n                      {unReadMsg.id && unReadMsg.id === _id && (\n                        <div className={styles.unread_msg}>\n                          <span>\n                            {unReadMsg.total} Unread Message\n                            {unReadMsg.total > 1 && \"s\"}\n                          </span>\n                        </div>\n                      )}\n                      <div\n                        className={classNames(styles.chat_wrapper, {\n                          [styles.end]: userId === id,\n                        })}\n                        msgid={_id}\n                        {...(key === 0 && index === 0 && { first: \"\" })}\n                        {...(key === chats.length - 1 &&\n                          index === messages.length - 1 && { last: \"\" })}\n                      >\n                        <div>\n                          <div\n                            className={styles.chat_card}\n                            id={`reaction-${_id}`}\n                          >\n                            {reply && (\n                              <div\n                                className={styles.reply_card}\n                                onClick={() =>\n                                  focusMsgById(reply._id, \"smooth\")\n                                }\n                              >\n                                <span>{reply.msg}</span>\n                              </div>\n                            )}\n                            <div>\n                              {isGroupChat && id !== userId && (\n                                <span\n                                  style={{ color: avatar }}\n                                  className={styles.user_name}\n                                >\n                                  {name.split(\" \")[0]}\n                                </span>\n                              )}\n                              <span>{msg}</span>\n                            </div>\n                            <div className={styles.msg_time}>\n                              <i className={`bx-time ${styles.clock}`}></i>\n                              <span>\n                                {moment(new Date(date)).format(\"h:mm a\")}\n                              </span>\n                              <i\n                                className={`bx bx-check-double ${styles.tick}`}\n                                seen={\n                                  Array.isArray(otherUserId)\n                                    ? (\n                                        seen.length === otherUserId.length\n                                      ).toString()\n                                    : seen.includes(otherUserId).toString()\n                                }\n                              ></i>\n                            </div>\n                          </div>\n                          <div className={styles.options}>\n                            <i\n                              className=\"bx-dots-vertical-rounded\"\n                              id={`option-${_id}`}\n                            ></i>\n                          </div>\n                        </div>\n                        {totalReactions > 0 && (\n                          <div className={styles.reactions}>\n                            {reactions.map(({ reaction }) => {\n                              return <img src={getReactionUrl(reaction)} />;\n                            })}\n                            <span>{totalReactions}</span>\n                          </div>\n                        )}\n                      </div>\n                      <Options\n                        selector={`#option-${_id}`}\n                        onCopy={onCopy}\n                        onReply={onReply}\n                        onDelete={onDelete}\n                        date={date}\n                        msgId={_id}\n                        msg={msg}\n                      />\n                      <Reaction\n                        selector={`#reaction-${_id}`}\n                        reactions={reactionList}\n                        onClick={(emoji) =>\n                          handleReaction(emoji, reactions, _id)\n                        }\n                      />\n                    </Fragment>\n                  );\n                }\n              )}\n            </div>\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Conversation_container__I7CJi\",\"chat_wrapper\":\"Conversation_chat_wrapper__S3O8R\",\"end\":\"Conversation_end__ZMbi5\",\"chat_card\":\"Conversation_chat_card__jz70L\",\"reply_card\":\"Conversation_reply_card__AEy90\",\"msg_time\":\"Conversation_msg_time__wN53F\",\"tick\":\"Conversation_tick__RkyEe\",\"reactions\":\"Conversation_reactions__faDG2\",\"user_name\":\"Conversation_user_name__RDhDd\",\"clock\":\"Conversation_clock__y4n8i\",\"options\":\"Conversation_options__WLSBI\",\"date\":\"Conversation_date__ZfQTB\",\"unread_msg\":\"Conversation_unread_msg__yFItk\",\"section\":\"Conversation_section__wG88I\",\"load\":\"Conversation_load__rqCbg\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Reaction_container__yXj24\",\"wrapper\":\"Reaction_wrapper__m5dkH\"};"],"names":["Options","onReply","onDelete","onCopy","selector","date","msgId","msg","DropDown","placement","DropDownItem","className","onClick","Reaction","reactions","styles","zIndex","map","emoji","index","id","src","getReactionUrl","Conversation","chats","userId","focusMsgById","otherUserId","unReadMsg","isGroupChat","reactionList","handleReaction","Fragment","key","day","messages","moment","format","sender","name","avatar","_id","seen","reply","totalReactions","total","classNames","msgid","first","length","last","style","color","split","Date","Array","isArray","toString","includes","reaction"],"sourceRoot":""}