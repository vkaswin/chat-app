{"version":3,"file":"static/js/2775.b841ac66.chunk.js","mappings":"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","sources":["layouts/AppLayout/Chat/Conversation/Options/index.js","layouts/AppLayout/Chat/Conversation/Reaction/index.js","layouts/AppLayout/Chat/Conversation/index.js","layouts/AppLayout/Chat/ReactionPopup/index.js","layouts/AppLayout/Chat/SeenPopup/index.js","webpack://react-chat-app/./src/layouts/AppLayout/Chat/Conversation/Conversation.module.scss?e9d7","webpack://react-chat-app/./src/layouts/AppLayout/Chat/Conversation/Reaction/Reaction.module.scss?7ea8","webpack://react-chat-app/./src/layouts/AppLayout/Chat/ReactionPopup/ReactionPopup.module.scss?5bbe","webpack://react-chat-app/./src/layouts/AppLayout/Chat/SeenPopup/SeenPopup.module.scss?4b38"],"sourcesContent":["import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\n\nexport const Options = ({\n  onReply,\n  onDelete,\n  onCopy,\n  selector,\n  date,\n  msgId,\n  msg,\n}) => {\n  return (\n    <DropDown selector={selector} placement=\"bottom\">\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onReply(date, msgId)}\n      >\n        <span>Reply</span>\n        <i className=\"bx-share\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\">\n        <span>Forward</span>\n        <i className=\"bx-share-alt\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\" onClick={() => onCopy(msg)}>\n        <span>Copy</span>\n        <i className=\"bx-copy\"></i>\n      </DropDownItem>\n      <DropDownItem className=\"dropdown-option\">\n        <span>Mark as Unread</span>\n        <i className=\"bx-message-error\"></i>\n      </DropDownItem>\n      <DropDownItem\n        className=\"dropdown-option\"\n        onClick={() => onDelete(date, msgId)}\n      >\n        <span>Delete</span>\n        <i className=\"bx-trash\"></i>\n      </DropDownItem>\n    </DropDown>\n  );\n};\n","import React from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\nimport { getReactionUrl } from \"utils\";\n\nimport styles from \"./Reaction.module.scss\";\n\nexport const Reaction = ({ reactions, selector, onClick }) => {\n  return (\n    <DropDown\n      selector={selector}\n      className={styles.container}\n      placement=\"bottom\"\n    >\n      {reactions.map((emoji, index) => {\n        return (\n          <DropDownItem\n            className={styles.wrapper}\n            key={index}\n            onClick={() => onClick(emoji)}\n          >\n            <img id={emoji} src={getReactionUrl(emoji)} />\n          </DropDownItem>\n        );\n      })}\n    </DropDown>\n  );\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { classNames, getReactionUrl } from \"utils\";\nimport { Reaction } from \"./Reaction\";\nimport { Options } from \"./Options\";\nimport moment from \"moment\";\n\nimport styles from \"./Conversation.module.scss\";\nimport ReactionPopup from \"../ReactionPopup\";\nimport SeenPopup from \"../SeenPopup\";\n\nexport const Conversation = ({\n  chats,\n  onDelete,\n  onCopy,\n  onReply,\n  userId,\n  focusMsgById,\n  users,\n  unReadMsg,\n  isGroupChat,\n  reactionList,\n  handleReaction,\n  findMsgByMsgId,\n}) => {\n  let [message, setMessage] = useState({});\n  let [isOpen, setIsOpen] = useState({ reaction: false, seen: false });\n\n  const toggle = ({ msgId, type }) => {\n    if (isOpen[type]) return setIsOpen({ ...isOpen, [type]: false });\n    let msg = findMsgByMsgId(msgId);\n    if (!msg) return;\n    setMessage(msg);\n    setIsOpen({ ...isOpen, [type]: true });\n  };\n\n  return (\n    <Fragment>\n      {chats.map(({ day, messages }, key) => {\n        return (\n          <Fragment key={key}>\n            <div className={styles.date}>\n              <span>{moment(day).format(\"D MMMM YYYY\")}</span>\n            </div>\n            <div className={styles.container}>\n              {messages.map(\n                (\n                  {\n                    msg,\n                    date,\n                    sender: { id = null, name = null, avatar = null } = {},\n                    _id,\n                    seen,\n                    reply = null,\n                    reactions,\n                    totalReactions,\n                  },\n                  index\n                ) => {\n                  return (\n                    <Fragment key={_id}>\n                      {unReadMsg.id && unReadMsg.id === _id && (\n                        <div className={styles.unread_msg}>\n                          <span>\n                            {unReadMsg.total} Unread Message\n                            {unReadMsg.total > 1 && \"s\"}\n                          </span>\n                        </div>\n                      )}\n                      <div\n                        className={classNames(styles.chat_wrapper, {\n                          [styles.end]: userId === id,\n                        })}\n                        msgid={_id}\n                        {...(key === 0 && index === 0 && { first: \"\" })}\n                        {...(key === chats.length - 1 &&\n                          index === messages.length - 1 && { last: \"\" })}\n                      >\n                        <div>\n                          <div\n                            className={styles.chat_card}\n                            {...(userId !== id && { id: `reaction-${_id}` })}\n                          >\n                            {reply && (\n                              <div\n                                className={styles.reply_card}\n                                onClick={() =>\n                                  focusMsgById(reply._id, \"smooth\")\n                                }\n                              >\n                                <span>{reply.msg}</span>\n                              </div>\n                            )}\n                            <div>\n                              {isGroupChat && id !== userId && (\n                                <span\n                                  style={{ color: avatar }}\n                                  className={styles.user_name}\n                                >\n                                  {name.split(\" \")[0]}\n                                </span>\n                              )}\n                              <span>{msg}</span>\n                            </div>\n                            <div className={styles.msg_time}>\n                              <i className={`bx-time ${styles.clock}`}></i>\n                              <span>\n                                {moment(new Date(date)).format(\"h:mm a\")}\n                              </span>\n                              <i\n                                className={`bx bx-check-double ${styles.tick}`}\n                                seen={(seen.length === users.length).toString()}\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  console.log(\"seen\");\n                                  toggle({ msgId: _id, type: \"seen\" });\n                                }}\n                              ></i>\n                            </div>\n                          </div>\n                          <div className={styles.options}>\n                            <i\n                              className=\"bx-dots-vertical-rounded\"\n                              id={`option-${_id}`}\n                            ></i>\n                          </div>\n                        </div>\n                        {totalReactions > 0 && (\n                          <div\n                            className={styles.reactions}\n                            onClick={() =>\n                              toggle({ msgId: _id, type: \"reaction\" })\n                            }\n                          >\n                            {reactions.map(({ reaction }, ind) => {\n                              return (\n                                <img key={ind} src={getReactionUrl(reaction)} />\n                              );\n                            })}\n                            <span>{totalReactions}</span>\n                          </div>\n                        )}\n                      </div>\n                      <Options\n                        selector={`#option-${_id}`}\n                        onCopy={onCopy}\n                        onReply={onReply}\n                        onDelete={onDelete}\n                        date={date}\n                        msgId={_id}\n                        msg={msg}\n                      />\n                      <Reaction\n                        selector={`#reaction-${_id}`}\n                        reactions={reactionList}\n                        onClick={(emoji) =>\n                          handleReaction(emoji, reactions, _id)\n                        }\n                      />\n                    </Fragment>\n                  );\n                }\n              )}\n            </div>\n          </Fragment>\n        );\n      })}\n      <ReactionPopup\n        isOpen={isOpen.reaction}\n        message={message}\n        toggle={() => toggle({ type: \"reaction\" })}\n      />\n      <SeenPopup\n        isOpen={isOpen.seen}\n        message={message}\n        toggle={() => toggle({ type: \"seen\" })}\n      />\n    </Fragment>\n  );\n};\n","import React, { useMemo, useState } from \"react\";\nimport { Avatar, Modal } from \"components\";\nimport { getReactionUrl } from \"utils\";\n\nimport styles from \"./ReactionPopup.module.scss\";\n\nconst ReactionPopup = ({ isOpen, toggle, message }) => {\n  let [activeIndex, setActiveIndex] = useState();\n\n  const reaction = useMemo(() => {\n    if (!message.hasOwnProperty(\"reactions\")) return [];\n    return activeIndex === 0 || activeIndex\n      ? message.reactions[activeIndex].users\n      : message.reactions.reduce((initial, { users }) => {\n          return initial.concat(users);\n        }, []);\n  }, [activeIndex, message]);\n\n  return (\n    <Modal isOpen={isOpen} toggle={toggle}>\n      <div className={styles.popup}>\n        <div className={styles.reactions}>\n          <div className={styles.all} onClick={() => setActiveIndex()}>\n            <span>All</span>\n          </div>\n          {message?.reactions?.map(({ reaction, total }, index) => {\n            return (\n              <div\n                key={index}\n                className={styles.card}\n                onClick={() => setActiveIndex(index)}\n              >\n                <img src={getReactionUrl(reaction)} />\n                <span>{total}</span>\n              </div>\n            );\n          })}\n        </div>\n        <div className={styles.users}>\n          {reaction.map(({ avatar, email, id, name, status }, index) => {\n            return (\n              <div key={index} className={styles.card}>\n                <Avatar\n                  name={name}\n                  size={40}\n                  status={status}\n                  userId={id}\n                  src={avatar}\n                />\n                <span>{name}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ReactionPopup;\n","import React, { useMemo } from \"react\";\nimport { Avatar, Modal } from \"components\";\n\nimport styles from \"./SeenPopup.module.scss\";\n\nconst SeenPopup = ({ isOpen, toggle, message }) => {\n  const users = useMemo(() => {\n    if (!message.hasOwnProperty(\"seen\")) return [];\n    return message.seen;\n  }, [message]);\n\n  return (\n    <Modal isOpen={isOpen} toggle={toggle}>\n      <div className={styles.popup}>\n        <div className={styles.reactions}>\n          <div className={styles.all}>\n            <span>Seen</span>\n          </div>\n        </div>\n        <div className={styles.users}>\n          {users.map(({ avatar, email, id, name, status }, index) => {\n            return (\n              <div key={index} className={styles.card}>\n                <Avatar\n                  name={name}\n                  size={40}\n                  status={status}\n                  userId={id}\n                  src={avatar}\n                />\n                <span>{name}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default SeenPopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Conversation_container__I7CJi\",\"chat_wrapper\":\"Conversation_chat_wrapper__S3O8R\",\"end\":\"Conversation_end__ZMbi5\",\"chat_card\":\"Conversation_chat_card__jz70L\",\"reply_card\":\"Conversation_reply_card__AEy90\",\"msg_time\":\"Conversation_msg_time__wN53F\",\"tick\":\"Conversation_tick__RkyEe\",\"reactions\":\"Conversation_reactions__faDG2\",\"user_name\":\"Conversation_user_name__RDhDd\",\"clock\":\"Conversation_clock__y4n8i\",\"options\":\"Conversation_options__WLSBI\",\"date\":\"Conversation_date__ZfQTB\",\"unread_msg\":\"Conversation_unread_msg__yFItk\",\"section\":\"Conversation_section__wG88I\",\"load\":\"Conversation_load__rqCbg\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Reaction_container__yXj24\",\"wrapper\":\"Reaction_wrapper__m5dkH\"};","// extracted by mini-css-extract-plugin\nexport default {\"popup\":\"ReactionPopup_popup__yt4AZ\",\"reactions\":\"ReactionPopup_reactions__3HDB6\",\"all\":\"ReactionPopup_all__nfaPI\",\"card\":\"ReactionPopup_card__P+lgl\",\"users\":\"ReactionPopup_users__81RJu\"};","// extracted by mini-css-extract-plugin\nexport default {\"popup\":\"SeenPopup_popup__d-7Be\",\"reactions\":\"SeenPopup_reactions__DkyZZ\",\"all\":\"SeenPopup_all__2FlpU\",\"users\":\"SeenPopup_users__Ehebn\",\"card\":\"SeenPopup_card__irnNc\"};"],"names":["Options","onReply","onDelete","onCopy","selector","date","msgId","msg","DropDown","placement","DropDownItem","className","onClick","Reaction","reactions","styles","map","emoji","index","id","src","getReactionUrl","Conversation","chats","userId","focusMsgById","users","unReadMsg","isGroupChat","reactionList","handleReaction","findMsgByMsgId","useState","message","setMessage","reaction","seen","isOpen","setIsOpen","toggle","type","Fragment","key","day","messages","moment","format","sender","name","avatar","_id","reply","totalReactions","total","classNames","msgid","first","length","last","style","color","split","Date","toString","e","stopPropagation","console","log","ind","activeIndex","setActiveIndex","useMemo","hasOwnProperty","reduce","initial","concat","Modal","email","status","Avatar","size"],"sourceRoot":""}