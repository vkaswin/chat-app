{"version":3,"file":"static/js/2775.e2840dec.chunk.js","mappings":"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","sources":["layouts/AppLayout/Chat/Conversation/index.js","webpack://react-chat-app/./src/layouts/AppLayout/Chat/Conversation/Conversation.module.scss?e9d7"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport { DropDown, DropDownItem } from \"components\";\nimport { classNames } from \"utils\";\nimport moment from \"moment\";\n\nimport styles from \"./Conversation.module.scss\";\n\nexport const Conversation = ({\n  chats,\n  onDelete,\n  onCopy,\n  onReply,\n  userId,\n  focusMsgById,\n  otherUserId,\n  unReadMsg,\n  isGroupChat,\n}) => {\n  return (\n    <Fragment>\n      {chats.map(({ day, messages }, key) => {\n        return (\n          <Fragment key={key}>\n            <div className={styles.date}>\n              <span>{moment(day).format(\"D MMMM YYYY\")}</span>\n            </div>\n            <div className={styles.container}>\n              {messages.map(\n                (\n                  {\n                    msg,\n                    date,\n                    sender: { id = null, name = null, avatar = null } = {},\n                    _id,\n                    seen,\n                    reply = null,\n                  },\n                  index\n                ) => {\n                  return (\n                    <Fragment key={index}>\n                      {unReadMsg.id && unReadMsg.id === _id && (\n                        <div className={styles.unread_msg}>\n                          <span>\n                            {unReadMsg.total} Unread Message\n                            {unReadMsg.total > 1 && \"s\"}\n                          </span>\n                        </div>\n                      )}\n                      <div\n                        className={classNames(styles.chat_wrapper, {\n                          [styles.end]: userId === id,\n                        })}\n                        msgid={_id}\n                        first={key === 0 && index === 0 && \"\"}\n                        last={\n                          key === chats.length - 1 &&\n                          index === messages.length - 1 &&\n                          \"\"\n                        }\n                      >\n                        <div className={styles.chat_card}>\n                          {reply && (\n                            <div\n                              className={styles.reply_card}\n                              onClick={() => focusMsgById(reply._id, \"smooth\")}\n                            >\n                              <span>{reply.msg}</span>\n                            </div>\n                          )}\n                          <div>\n                            {isGroupChat && id !== userId && (\n                              <span\n                                style={{ color: avatar }}\n                                className={styles.user_name}\n                              >\n                                {name.split(\" \")[0]}\n                              </span>\n                            )}\n                            <span>{msg}</span>\n                          </div>\n                          <div className={styles.msg_time}>\n                            <i className={`bx-time ${styles.clock}`}></i>\n                            <span>\n                              {moment(new Date(date)).format(\"h:mm a\")}\n                            </span>\n                            <i\n                              className={`bx bx-check-double ${styles.tick}`}\n                              seen={\n                                Array.isArray(otherUserId)\n                                  ? (\n                                      seen.length === otherUserId.length\n                                    ).toString()\n                                  : seen.includes(otherUserId).toString()\n                              }\n                            ></i>\n                          </div>\n                        </div>\n                        <div className={styles.options}>\n                          <i\n                            className=\"bx-dots-vertical-rounded\"\n                            id={`option-${key}${index}`}\n                          ></i>\n                          <DropDown\n                            selector={`#option-${key}${index}`}\n                            placement=\"bottom\"\n                          >\n                            <DropDownItem\n                              className=\"dropdown-option\"\n                              onClick={() => onReply(date, _id)}\n                            >\n                              <span>Reply</span>\n                              <i className=\"bx-share\"></i>\n                            </DropDownItem>\n                            <DropDownItem className=\"dropdown-option\">\n                              <span>Forward</span>\n                              <i className=\"bx-share-alt\"></i>\n                            </DropDownItem>\n                            <DropDownItem\n                              className=\"dropdown-option\"\n                              onClick={() => onCopy(msg)}\n                            >\n                              <span>Copy</span>\n                              <i className=\"bx-copy\"></i>\n                            </DropDownItem>\n                            <DropDownItem className=\"dropdown-option\">\n                              <span>Mark as Unread</span>\n                              <i className=\"bx-message-error\"></i>\n                            </DropDownItem>\n                            <DropDownItem\n                              className=\"dropdown-option\"\n                              onClick={() => onDelete(date, _id)}\n                            >\n                              <span>Delete</span>\n                              <i className=\"bx-trash\"></i>\n                            </DropDownItem>\n                          </DropDown>\n                        </div>\n                      </div>\n                    </Fragment>\n                  );\n                }\n              )}\n            </div>\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Conversation_container__I7CJi\",\"chat_wrapper\":\"Conversation_chat_wrapper__S3O8R\",\"end\":\"Conversation_end__ZMbi5\",\"chat_card\":\"Conversation_chat_card__jz70L\",\"reply_card\":\"Conversation_reply_card__AEy90\",\"msg_time\":\"Conversation_msg_time__wN53F\",\"tick\":\"Conversation_tick__RkyEe\",\"user_name\":\"Conversation_user_name__RDhDd\",\"clock\":\"Conversation_clock__y4n8i\",\"options\":\"Conversation_options__WLSBI\",\"date\":\"Conversation_date__ZfQTB\",\"unread_msg\":\"Conversation_unread_msg__yFItk\",\"section\":\"Conversation_section__wG88I\",\"load\":\"Conversation_load__rqCbg\"};"],"names":["Conversation","chats","onDelete","onCopy","onReply","userId","focusMsgById","otherUserId","unReadMsg","isGroupChat","Fragment","map","key","day","messages","className","styles","moment","format","index","msg","date","sender","id","name","avatar","_id","seen","reply","total","classNames","msgid","first","last","length","onClick","style","color","split","Date","Array","isArray","toString","includes","DropDown","selector","placement","DropDownItem"],"sourceRoot":""}