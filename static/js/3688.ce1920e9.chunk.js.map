{"version":3,"file":"static/js/3688.ce1920e9.chunk.js","mappings":"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","sources":["pages/Contacts/index.js","services/Contact.js","services/index.js","webpack://react-chat-app/./src/pages/Contacts/Contacts.module.scss?47b9"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Avatar, DropDown, Toast, DropDownItem } from \"components\";\nimport { classNames } from \"utils\";\nimport { useAuth } from \"hooks\";\nimport { getContacts } from \"services/Contact\";\n\nimport styles from \"./Contacts.module.scss\";\n\nconst alphabets = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n\nconst Contacts = () => {\n  const { handleChat } = useAuth();\n\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n    getAllContacts();\n  }, []);\n\n  const getAllContacts = async () => {\n    try {\n      let {\n        data: { data },\n      } = await getContacts();\n      sortContactsByName(data);\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    }\n  };\n\n  const sortContactsByName = (contactList) => {\n    let contactByAlphabets = alphabets.map((letter) => {\n      let list = contactList.filter(({ user: { name } }) => {\n        return name.charAt(0).toLowerCase() === letter;\n      });\n\n      return {\n        word: letter.toUpperCase(),\n        users:\n          list.length > 0\n            ? list.sort((a, b) => a.user.name.localeCompare(b.user.name))\n            : list,\n      };\n    });\n    setContacts([...contacts, ...contactByAlphabets]);\n  };\n\n  return (\n    <div id=\"contacts-container\" className={styles.contacts_list}>\n      {contacts?.map(({ word, users }, index) => {\n        return (\n          users.length > 0 && (\n            <Fragment key={index}>\n              <div className={styles.title}>\n                <b>{word}</b>\n              </div>\n              {users.map(\n                (\n                  { user: { name, avatar, status, _id: userId }, chatId, _id },\n                  ind\n                ) => {\n                  return (\n                    <Fragment key={ind}>\n                      <div className={classNames(styles.contact_card)}>\n                        <div\n                          className={styles.user}\n                          onClick={() => handleChat(chatId)}\n                        >\n                          <Avatar\n                            src={avatar}\n                            name={name}\n                            size={35}\n                            status={status}\n                            userId={userId}\n                          />\n                          <span>{name}</span>\n                        </div>\n                        <i\n                          className=\"bx-dots-vertical-rounded\"\n                          id={`${word}-${ind}`}\n                        ></i>\n                      </div>\n                      <DropDown placement=\"bottom\" selector={`#${word}-${ind}`}>\n                        <DropDownItem className=\"dropdown-option\">\n                          <span>Block</span>\n                          <i className=\"bx-block\"></i>\n                        </DropDownItem>\n                        <DropDownItem className=\"dropdown-option\">\n                          <span>Remove</span>\n                          <i className=\"bx-trash\"></i>\n                        </DropDownItem>\n                      </DropDown>\n                    </Fragment>\n                  );\n                }\n              )}\n            </Fragment>\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import { axios } from \"services\";\nimport { endpoints } from \"config\";\n\nexport const getContacts = (params) => {\n  return axios({ method: \"get\", url: endpoints.contact.getContact, params });\n};\n\nexport const createContact = (data) => {\n  return axios({ method: \"post\", url: endpoints.contact.createContact, data });\n};\n\nexport const deleteContact = (contactId) => {\n  return axios({\n    method: \"delete\",\n    url: `${endpoints.contact.deleteContact}/${contactId}`,\n  });\n};\n","import Axios from \"axios\";\nimport { cookies } from \"utils\";\nimport { baseURL } from \"config\";\n\nexport const axios = Axios.create({ baseURL });\n\naxios.interceptors.request.use(\n  (config) => {\n    const cookie = cookies();\n\n    const token = cookie.get(\"authToken\");\n    if (token) {\n      config.headers.Authorization = token;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      document.dispatchEvent(new CustomEvent(\"logout\"));\n    }\n    return Promise.reject(error?.response?.data);\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_list\":\"Contacts_contacts_list__70eS1\",\"title\":\"Contacts_title__CFJgb\",\"contact_card\":\"Contacts_contact_card__e3hM8\",\"user\":\"Contacts_user__9UUPA\"};"],"names":["alphabets","handleChat","useAuth","useState","contacts","setContacts","useEffect","getAllContacts","getContacts","data","sortContactsByName","Toast","type","message","contactList","contactByAlphabets","map","letter","list","filter","user","name","charAt","toLowerCase","word","toUpperCase","users","length","sort","a","b","localeCompare","id","className","styles","index","Fragment","ind","avatar","status","userId","_id","chatId","classNames","onClick","Avatar","src","size","DropDown","placement","selector","DropDownItem","params","axios","method","url","endpoints","createContact","deleteContact","contactId","Axios","baseURL","interceptors","request","use","config","token","cookies","get","headers","Authorization","error","Promise","reject","response","document","dispatchEvent","CustomEvent"],"sourceRoot":""}