{"version":3,"file":"static/js/573.afd3338f.chunk.js","mappings":"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","sources":["pages/Chats/index.js","webpack://react-chat-app/./src/pages/Chats/Chats.module.scss?1b4d"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { Avatar, Toast } from \"components\";\nimport { classNames, handleChat } from \"utils\";\nimport { useAuth, useSocket } from \"hooks\";\nimport {\n  getFavouriteChats,\n  getRecentChats,\n  getGroupChats,\n} from \"services/Chat\";\nimport moment from \"moment\";\n\nimport styles from \"./Chats.module.scss\";\n\nconst Chats = () => {\n  const { chatId } = useAuth();\n\n  const { socket, connected } = useSocket();\n\n  const [chatList, setChatList] = useState({\n    recent: [],\n    favourite: [],\n    group: [],\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { favourite, recent, group } = chatList;\n\n  useEffect(() => {\n    if (!socket || !connected) return;\n    socket.on(\"new-message\", handleNewMessage);\n  }, [connected, socket]);\n\n  useEffect(() => {\n    getChats();\n  }, []);\n\n  const getChats = async () => {\n    try {\n      let [recent, favourite, group] = await Promise.all([\n        await getRecentChats(),\n        await getFavouriteChats(),\n        await getGroupChats(),\n      ]);\n      setChatList({\n        ...chatList,\n        recent: recent.data.data,\n        favourite: favourite.data.data,\n        group: group.data.data,\n      });\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleNewMessage = (data) => {\n    const index = chatList[data.type].findIndex(({ _id }) => {\n      return _id === chatId;\n    });\n\n    if (index === -1)\n      return setChatList((prev) => {\n        const key = data.type;\n        return { ...prev, [key]: [data] };\n      });\n\n    setChatList((prev) => {\n      const key = data.type;\n      const chats = [...prev[key]];\n      chats.splice(index, 1);\n      return {\n        ...prev,\n        [key]: [data, ...chats],\n      };\n    });\n  };\n\n  const getDate = (date) => {\n    const isCurrentDate =\n      date.split(\"T\")[0] === new Date().toISOString().split(\"T\")[0];\n\n    return isCurrentDate\n      ? moment(date).format(\"h:mm a\")\n      : moment(date).format(\"DD/MM/YY\");\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.chat_list_container}>\n      {favourite.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Favourites</b>\n          </div>\n          {favourite.map(\n            (\n              { _id, count, msg, date, name, avatar, status, userId },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={userId}\n                    />\n                    <div className={styles.msg}>\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {recent.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Recent Chats</b>\n          </div>\n          {recent.map(\n            (\n              { _id, count, msg, date, name, avatar, status, userId },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={userId}\n                    />\n                    <div className={styles.msg}>\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {group.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Groups</b>\n            <button>\n              <i className=\"bx-plus\"></i>\n            </button>\n          </div>\n          {group.map(({ _id, count, msg, date, name, avatar }, index) => {\n            return (\n              <div\n                key={index}\n                className={classNames(styles.user_card, {\n                  [styles.active]: _id === chatId,\n                })}\n                onClick={() => handleChat(_id)}\n              >\n                <div className={styles.user}>\n                  <Avatar src={avatar} name={name} size={35} />\n                  <div className={styles.msg}>\n                    <span className=\"truncate-1\">{name}</span>\n                    <span className=\"truncate-1\">{msg}</span>\n                  </div>\n                </div>\n                <div\n                  className={classNames(styles.time, {\n                    [styles.top]: !count,\n                  })}\n                >\n                  <span>{getDate(date)}</span>\n                  {count > 0 && <label>{count}</label>}\n                </div>\n              </div>\n            );\n          })}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Chats;\n","// extracted by mini-css-extract-plugin\nexport default {\"chat_list_container\":\"Chats_chat_list_container__Lo8ht\",\"title\":\"Chats_title__ncpOR\",\"user_card\":\"Chats_user_card__m+jOS\",\"active\":\"Chats_active__07HzW\",\"user\":\"Chats_user__LeGpu\",\"msg\":\"Chats_msg__y5EF6\",\"time\":\"Chats_time__hAPQQ\",\"top\":\"Chats_top__dpX3P\"};"],"names":["chatId","useAuth","useSocket","socket","connected","useState","recent","favourite","group","chatList","setChatList","isLoading","setIsLoading","useEffect","on","handleNewMessage","getChats","Promise","getRecentChats","getFavouriteChats","getGroupChats","all","data","Toast","type","message","index","findIndex","_id","prev","key","chats","splice","getDate","date","split","Date","toISOString","moment","format","className","styles","length","Fragment","map","count","msg","name","avatar","status","userId","classNames","onClick","handleChat","Avatar","src","size"],"sourceRoot":""}