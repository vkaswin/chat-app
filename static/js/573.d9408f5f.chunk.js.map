{"version":3,"file":"static/js/573.d9408f5f.chunk.js","mappings":"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","sources":["pages/Chats/index.js","webpack://react-chat-app/./src/pages/Chats/Chats.module.scss?1b4d"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Avatar, Toast } from \"components\";\nimport { classNames, handleChat } from \"utils\";\nimport { useAuth } from \"hooks\";\nimport {\n  getFavouriteChats,\n  getRecentChats,\n  getGroupChats,\n} from \"services/Chat\";\nimport moment from \"moment\";\nimport { socket } from \"socket\";\n\nimport styles from \"./Chats.module.scss\";\n\nconst Chats = () => {\n  const { chatId } = useAuth();\n\n  const [chatList, setChatList] = useState({\n    recent: [],\n    favourite: [],\n    group: [],\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { favourite, recent, group } = chatList;\n\n  useEffect(() => {\n    document.addEventListener(\"socket\", handleSocket);\n    getChats();\n    return () => {\n      document.removeEventListener(\"socket\", handleSocket);\n    };\n  }, []);\n\n  const handleSocket = () => {\n    socket.on(\"new-message\", handleNewMessage);\n\n    socket.on(\"start-typing\", handleStartTyping);\n\n    socket.on(\"end-typing\", handleEndTyping);\n  };\n\n  const getChats = async () => {\n    try {\n      let [recent, favourite, group] = await Promise.all([\n        await getRecentChats(),\n        await getFavouriteChats(),\n        await getGroupChats(),\n      ]);\n      setChatList({\n        ...chatList,\n        recent: recent.data.data,\n        favourite: favourite.data.data,\n        group: group.data.data,\n      });\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleNewMessage = (data) => {\n    setChatList((prev) => {\n      const key = data.type;\n\n      const index = prev[key].findIndex(({ _id }) => {\n        return _id === data._id;\n      });\n\n      if (index === -1) {\n        data.count = 1;\n        return { ...prev, [key]: [data] };\n      }\n\n      const chats = [...prev[key]];\n      let [oldChat] = chats.splice(index, 1);\n      data.count = oldChat.count + 1;\n      return {\n        ...prev,\n        [key]: [data, ...chats],\n      };\n    });\n  };\n\n  const getDate = (date) => {\n    const isCurrentDate =\n      date.split(\"T\")[0] === new Date().toISOString().split(\"T\")[0];\n\n    return isCurrentDate\n      ? moment(date).format(\"h:mm a\")\n      : moment(date).format(\"DD/MM/YY\");\n  };\n\n  const handleStartTyping = (chatId, userName) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element\n      .querySelector(\"[typingstatus]\")\n      .setAttribute(\"typing\", `${userName.split(\" \")[0]} is typing...`);\n  };\n\n  const handleEndTyping = (chatId) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element.querySelector(\"[typingstatus]\").removeAttribute(\"typing\");\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.chat_list_container}>\n      {favourite.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Favourites</b>\n          </div>\n          {favourite.map(\n            (\n              { _id, count, msg, date, name, avatar, status, userId },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                  chatid={_id}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={userId}\n                    />\n                    <div className={styles.msg} typingstatus=\"\">\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {recent.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Recent Chats</b>\n          </div>\n          {recent.map(\n            (\n              { _id, count, msg, date, name, avatar, status, userId },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                  chatid={_id}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={userId}\n                    />\n                    <div className={styles.msg} typingstatus=\"\">\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {group.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Groups</b>\n            <button>\n              <i className=\"bx-plus\"></i>\n            </button>\n          </div>\n          {group.map(({ _id, count, msg, date, name, avatar }, index) => {\n            return (\n              <div\n                key={index}\n                className={classNames(styles.user_card, {\n                  [styles.active]: _id === chatId,\n                })}\n                onClick={() => handleChat(_id)}\n                chatid={_id}\n              >\n                <div className={styles.user}>\n                  <Avatar src={avatar} name={name} size={35} />\n                  <div className={styles.msg} typingstatus=\"\">\n                    <span className=\"truncate-1\">{name}</span>\n                    <span className=\"truncate-1\">{msg}</span>\n                  </div>\n                </div>\n                <div\n                  className={classNames(styles.time, {\n                    [styles.top]: !count,\n                  })}\n                >\n                  <span>{getDate(date)}</span>\n                  {count > 0 && <label>{count}</label>}\n                </div>\n              </div>\n            );\n          })}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Chats;\n","// extracted by mini-css-extract-plugin\nexport default {\"chat_list_container\":\"Chats_chat_list_container__Lo8ht\",\"title\":\"Chats_title__ncpOR\",\"user_card\":\"Chats_user_card__m+jOS\",\"active\":\"Chats_active__07HzW\",\"user\":\"Chats_user__LeGpu\",\"msg\":\"Chats_msg__y5EF6\",\"time\":\"Chats_time__hAPQQ\",\"top\":\"Chats_top__dpX3P\"};"],"names":["chatId","useAuth","useState","recent","favourite","group","chatList","setChatList","isLoading","setIsLoading","useEffect","document","addEventListener","handleSocket","getChats","removeEventListener","socket","handleNewMessage","handleStartTyping","handleEndTyping","Promise","getRecentChats","getFavouriteChats","getGroupChats","all","data","Toast","type","message","prev","key","index","findIndex","_id","count","chats","splice","oldChat","getDate","date","split","Date","toISOString","moment","format","userName","element","querySelector","setAttribute","removeAttribute","className","styles","length","Fragment","map","msg","name","avatar","status","userId","classNames","onClick","handleChat","chatid","Avatar","src","size","typingstatus"],"sourceRoot":""}