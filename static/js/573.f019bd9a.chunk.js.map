{"version":3,"file":"static/js/573.f019bd9a.chunk.js","mappings":"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","sources":["pages/Chats/index.js","webpack://react-chat-app/./src/pages/Chats/Chats.module.scss?1b4d"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { Avatar, Toast } from \"components\";\nimport { classNames } from \"utils\";\nimport { useAuth, useRouter } from \"hooks\";\nimport {\n  getFavouriteChats,\n  getRecentChats,\n  getGroupChats,\n} from \"services/Chat\";\nimport { socket } from \"socket\";\n\nimport styles from \"./Chats.module.scss\";\n\nconst Chats = () => {\n  const router = useRouter();\n\n  const { chatId = null } = router.query;\n\n  const { user } = useAuth();\n\n  const [chatList, setChatList] = useState({\n    recent: [],\n    favourites: [],\n    groups: [],\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { favourites, recent, groups } = chatList;\n\n  useEffect(() => {\n    if (!socket.io || !user) return;\n\n    socket.io.emit(\"join-room\", user.id);\n\n    socket.io.on(\"new-message\", handleNewMessage);\n  }, []);\n\n  useEffect(() => {\n    getChats();\n  }, []);\n\n  const getChats = async () => {\n    try {\n      let [recent, favourite, group] = await Promise.all([\n        await getRecentChats(),\n        await getFavouriteChats(),\n        await getGroupChats(),\n      ]);\n      setChatList({\n        ...chatList,\n        recent: recent.data.data,\n        favourites: favourite.data.data,\n        groups: group.data.data,\n      });\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChat = (chatId) => {\n    if (!chatId) return;\n    router.push(`/chats/${chatId}`);\n  };\n\n  const handleNewMessage = (data) => {\n    setChatList((prev) => {\n      const key = data.type;\n      const chats = [...prev[key]];\n      const index = chats.findIndex(({ _id }) => {\n        return _id === data.chatId;\n      });\n      const [element] = chats.splice(index, 1);\n\n      element.message = {\n        date: data.date,\n        msg: data.msg,\n        seen: data.seen,\n        _id: data._id,\n        name: \"Aswin\",\n      };\n      element.count += 1;\n\n      return { ...prev, [key]: [element, ...chats] };\n    });\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.chat_list_container}>\n      {favourites.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Favourites</b>\n          </div>\n          {favourites.map(\n            (\n              {\n                _id,\n                count,\n                message: { msg, date } = {},\n                user: { name, avatar, status },\n              },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                    />\n                    <div className={styles.msg}>\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-2\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{date}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {recent.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Recent Chats</b>\n          </div>\n          {recent.map(\n            (\n              {\n                _id,\n                count,\n                message: { msg } = \"\",\n                user: { name, avatar, status },\n              },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                    />\n                    <div className={styles.msg}>\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-2\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>12:30 pm</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {groups.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Groups</b>\n            <button>\n              <i className=\"bx-plus\"></i>\n            </button>\n          </div>\n          {groups.map(\n            ({ _id, count, message, group, name = \"Loreum Ipsum\" }, index) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleChat(_id)}\n                >\n                  <div className={styles.user}>\n                    <Avatar name={name} size={35} />\n                    <div className={styles.msg}>\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-2\">Loreum Ipsum</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>12:30 pm</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Chats;\n","// extracted by mini-css-extract-plugin\nexport default {\"chat_list_container\":\"Chats_chat_list_container__Lo8ht\",\"title\":\"Chats_title__ncpOR\",\"user_card\":\"Chats_user_card__m+jOS\",\"active\":\"Chats_active__07HzW\",\"user\":\"Chats_user__LeGpu\",\"msg\":\"Chats_msg__y5EF6\",\"time\":\"Chats_time__hAPQQ\",\"top\":\"Chats_top__dpX3P\"};"],"names":["router","useRouter","query","chatId","user","useAuth","useState","recent","favourites","groups","chatList","setChatList","isLoading","setIsLoading","useEffect","socket","id","handleNewMessage","getChats","Promise","getRecentChats","getFavouriteChats","getGroupChats","all","favourite","group","data","Toast","type","message","handleChat","push","prev","key","chats","index","findIndex","_id","splice","element","date","msg","seen","name","count","className","styles","length","Fragment","map","avatar","status","classNames","onClick","Avatar","src","size"],"sourceRoot":""}