{"version":3,"file":"static/js/688.7ead4e6b.chunk.js","mappings":"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","sources":["pages/Contacts/index.js","services/Contact.js","webpack://react-chat-app/./src/pages/Contacts/Contacts.module.scss?47b9"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Avatar, DropDown, Toast } from \"components\";\nimport { classNames, handleChat } from \"utils\";\nimport { getContacts } from \"services/Contact\";\n\nimport styles from \"./Contacts.module.scss\";\n\nconst alphabets = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n\nconst Contacts = () => {\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n    getAllContacts();\n  }, []);\n\n  const getAllContacts = async () => {\n    try {\n      let {\n        data: { data },\n      } = await getContacts();\n      sortContactsByName(data);\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    }\n  };\n\n  const sortContactsByName = (contactList) => {\n    let contactByAlphabets = alphabets.map((letter) => {\n      let list = contactList.filter(({ user: { name } }) => {\n        return name.charAt(0).toLowerCase() === letter;\n      });\n\n      return {\n        word: letter.toUpperCase(),\n        users:\n          list.length > 0\n            ? list.sort((a, b) => a.user.name.localeCompare(b.user.name))\n            : list,\n      };\n    });\n    setContacts([...contacts, ...contactByAlphabets]);\n  };\n\n  return (\n    <div id=\"contacts-container\" className={styles.contacts_list}>\n      {contacts?.map(({ word, users }, index) => {\n        return (\n          users.length > 0 && (\n            <Fragment key={index}>\n              <div className={styles.title}>\n                <b>{word}</b>\n              </div>\n              {users.map(\n                (\n                  { user: { name, avatar, status, _id: userId }, chatId, _id },\n                  ind\n                ) => {\n                  return (\n                    <Fragment key={ind}>\n                      <div className={classNames(styles.contact_card)}>\n                        <div\n                          className={styles.user}\n                          onClick={() => handleChat(chatId)}\n                        >\n                          <Avatar\n                            src={avatar}\n                            name={name}\n                            size={35}\n                            status={status}\n                            userId={userId}\n                          />\n                          <span>{name}</span>\n                        </div>\n                        <i\n                          className=\"bx-dots-vertical-rounded\"\n                          id={`${word}-${ind}`}\n                        ></i>\n                      </div>\n                      <DropDown placement=\"bottom\" selector={`#${word}-${ind}`}>\n                        <DropDown.Item className=\"dropdown-option\">\n                          <span>Block</span>\n                          <i className=\"bx-block\"></i>\n                        </DropDown.Item>\n                        <DropDown.Item className=\"dropdown-option\">\n                          <span>Remove</span>\n                          <i className=\"bx-trash\"></i>\n                        </DropDown.Item>\n                      </DropDown>\n                    </Fragment>\n                  );\n                }\n              )}\n            </Fragment>\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import { axios } from \"services\";\nimport { endpoints } from \"config\";\n\nexport const getContacts = (params) => {\n  return axios({ method: \"get\", url: endpoints.contact.getContact, params });\n};\n\nexport const createContact = (data) => {\n  return axios({ method: \"post\", url: endpoints.contact.createContact, data });\n};\n\nexport const deleteContact = (contactId) => {\n  return axios({\n    method: \"delete\",\n    url: `${endpoints.contact.deleteContact}/${contactId}`,\n  });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_list\":\"Contacts_contacts_list__70eS1\",\"title\":\"Contacts_title__CFJgb\",\"contact_card\":\"Contacts_contact_card__e3hM8\",\"user\":\"Contacts_user__9UUPA\",\"contact_option\":\"Contacts_contact_option__v54NK\"};"],"names":["alphabets","useState","contacts","setContacts","useEffect","getAllContacts","getContacts","data","sortContactsByName","Toast","type","message","contactList","contactByAlphabets","map","letter","list","filter","user","name","charAt","toLowerCase","word","toUpperCase","users","length","sort","a","b","localeCompare","id","className","styles","index","Fragment","ind","avatar","status","userId","_id","chatId","classNames","onClick","handleChat","Avatar","src","size","DropDown","placement","selector","params","axios","method","url","endpoints","createContact","deleteContact","contactId"],"sourceRoot":""}