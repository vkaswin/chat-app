{"version":3,"file":"static/js/8354.331c987f.chunk.js","mappings":"wMAiEA,UA1DiB,SAAC,GAAgD,IAA9CA,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC5CC,EAAU,SAACC,GAIf,OAFEA,EAAKC,MAAM,KAAK,MAAO,IAAIC,MAAOC,cAAcF,MAAM,KAAK,GAGzDG,IAAOJ,GAAMK,OAAO,UACpBD,IAAOJ,GAAMK,OAAO,WACzB,EAED,OACE,UAAC,EAAAC,SAAD,YACE,gBAAKC,UAAWC,EAAAA,QAAAA,MAAhB,UACE,uBAAId,EAAMe,OAAOf,EAAMgB,OAAS,EAAG,SAEpCf,EAAKgB,KACJ,WAEEC,GACI,IAFFC,EAEC,EAFDA,IAAKC,EAEJ,EAFIA,MAAOC,EAEX,EAFWA,IAAKf,EAEhB,EAFgBA,KAAMgB,EAEtB,EAFsBA,KAAMC,EAE5B,EAF4BA,OAAQC,EAEpC,EAFoCA,OAAQC,EAE5C,EAF4CA,OAAQC,EAEpD,EAFoDA,UAGvD,OACE,iBAEEb,WAAWc,EAAAA,EAAAA,YAAWb,EAAAA,QAAAA,WAAD,UAClBA,EAAAA,QAAAA,OAAgBK,IAAQf,IAE3BwB,QAAS,kBAAM1B,EAAYiB,EAAKhB,EAAMe,EAA7B,EACTW,OAAQV,EANV,WAQE,iBAAKN,UAAWC,EAAAA,QAAAA,KAAhB,WACE,SAAC,EAAAgB,OAAD,CACEC,IAAKR,GAAUG,EACfJ,KAAMA,EACNE,OAAQA,EACRQ,KAAM,GACNP,OAAQA,KAEV,iBAAKZ,UAAWC,EAAAA,QAAAA,IAAYmB,aAAa,GAAzC,WACE,iBAAMpB,UAAU,aAAhB,SAA8BS,KAC9B,iBAAMT,UAAU,aAAhB,SAA8BQ,WAGlC,iBACER,WAAWc,EAAAA,EAAAA,YAAWb,EAAAA,QAAAA,MAAD,UAClBA,EAAAA,QAAAA,KAAcM,IAFnB,WAKE,0BAAOf,EAAQC,KACdc,EAAQ,IAAK,2BAAQA,SA1BnBF,EA8BV,MAIR,C,8BC9DD,WAAgB,MAAQ,wBAAwB,UAAY,4BAA4B,OAAS,yBAAyB,KAAO,uBAAuB,IAAM,sBAAsB,KAAO,uBAAuB,IAAM,sB","sources":["pages/Chats/Card/index.js","webpack://chat-app/./src/pages/Chats/Card/ChatCard.module.scss?4bc8"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport { Avatar } from \"components\";\nimport { classNames } from \"utils\";\nimport moment from \"moment\";\n\nimport styles from \"./ChatCard.module.scss\";\n\nconst ChatCard = ({ title, list, handleClick, type, chatId }) => {\n  const getDate = (date) => {\n    const isCurrentDate =\n      date.split(\"T\")[0] === new Date().toISOString().split(\"T\")[0];\n\n    return isCurrentDate\n      ? moment(date).format(\"h:mm a\")\n      : moment(date).format(\"DD/MM/YY\");\n  };\n\n  return (\n    <Fragment>\n      <div className={styles.title}>\n        <b>{title.padEnd(title.length + 1, \"s\")}</b>\n      </div>\n      {list.map(\n        (\n          { _id, count, msg, date, name, avatar, status, userId, colorCode },\n          index\n        ) => {\n          return (\n            <div\n              key={index}\n              className={classNames(styles.user_card, {\n                [styles.active]: _id === chatId,\n              })}\n              onClick={() => handleClick(_id, type, index)}\n              chatid={_id}\n            >\n              <div className={styles.user}>\n                <Avatar\n                  src={avatar || colorCode}\n                  name={name}\n                  status={status}\n                  size={35}\n                  userId={userId}\n                />\n                <div className={styles.msg} typingstatus=\"\">\n                  <span className=\"truncate-1\">{name}</span>\n                  <span className=\"truncate-1\">{msg}</span>\n                </div>\n              </div>\n              <div\n                className={classNames(styles.time, {\n                  [styles.top]: !count,\n                })}\n              >\n                <span>{getDate(date)}</span>\n                {count > 0 && <label>{count}</label>}\n              </div>\n            </div>\n          );\n        }\n      )}\n    </Fragment>\n  );\n};\n\nexport default ChatCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ChatCard_title__0n9Lv\",\"user_card\":\"ChatCard_user_card__8uDum\",\"active\":\"ChatCard_active__Gepsm\",\"user\":\"ChatCard_user__DAwIV\",\"msg\":\"ChatCard_msg__T-C59\",\"time\":\"ChatCard_time__H+Dke\",\"top\":\"ChatCard_top__cWzoa\"};"],"names":["title","list","handleClick","type","chatId","getDate","date","split","Date","toISOString","moment","format","Fragment","className","styles","padEnd","length","map","index","_id","count","msg","name","avatar","status","userId","colorCode","classNames","onClick","chatid","Avatar","src","size","typingstatus"],"sourceRoot":""}