{"version":3,"file":"static/js/8573.4e0b7d01.chunk.js","mappings":"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","sources":["pages/Chats/Card/index.js","pages/Chats/index.js","services/Chat.js","services/index.js","webpack://chat-app/./src/pages/Chats/Card/ChatCard.module.scss?4bc8"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport { Avatar } from \"components\";\nimport { classNames } from \"utils\";\nimport moment from \"moment\";\n\nimport styles from \"./ChatCard.module.scss\";\n\nconst ChatCard = ({ title, list, handleClick, type, chatId }) => {\n  const getDate = (date) => {\n    const isCurrentDate =\n      date.split(\"T\")[0] === new Date().toISOString().split(\"T\")[0];\n\n    return isCurrentDate\n      ? moment(date).format(\"h:mm a\")\n      : moment(date).format(\"DD/MM/YY\");\n  };\n\n  return (\n    <Fragment>\n      <div className={styles.title}>\n        <b>{title.padEnd(title.length + 1, \"s\")}</b>\n      </div>\n      {list.map(\n        (\n          { _id, count, msg, date, name, avatar, status, userId, colorCode },\n          index\n        ) => {\n          return (\n            <div\n              key={index}\n              className={classNames(styles.user_card, {\n                [styles.active]: _id === chatId,\n              })}\n              onClick={() => handleClick(_id, type, index)}\n              chatid={_id}\n            >\n              <div className={styles.user}>\n                <Avatar\n                  src={avatar || colorCode}\n                  name={name}\n                  status={status}\n                  size={35}\n                  userId={userId}\n                />\n                <div className={styles.msg} typingstatus=\"\">\n                  <span className=\"truncate-1\">{name}</span>\n                  <span className=\"truncate-1\">{msg}</span>\n                </div>\n              </div>\n              <div\n                className={classNames(styles.time, {\n                  [styles.top]: !count,\n                })}\n              >\n                <span>{getDate(date)}</span>\n                {count > 0 && <label>{count}</label>}\n              </div>\n            </div>\n          );\n        }\n      )}\n    </Fragment>\n  );\n};\n\nexport default ChatCard;\n","import React, { Fragment, useEffect, useMemo, useState } from \"react\";\nimport { SearchBox, Toast } from \"components\";\nimport { useAuth } from \"hooks\";\nimport { getChatByType } from \"services/Chat\";\nimport { socket } from \"socket\";\nimport ChatCard from \"./Card\";\n\nconst types = {\n  recent: \"recent\",\n  favourite: \"favourite\",\n  group: \"group\",\n};\n\nconst Chats = () => {\n  const { chatId, handleChat } = useAuth();\n\n  const [chatList, setChatList] = useState({\n    favourite: [],\n    recent: [],\n    group: [],\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    document.addEventListener(\"socket\", handleSocket);\n    getChats();\n    return () => {\n      document.removeEventListener(\"socket\", handleSocket);\n    };\n  }, []);\n\n  const handleSocket = () => {\n    socket.on(\"message\", handleMessage);\n\n    socket.on(\"start-typing\", handleStartTyping);\n\n    socket.on(\"end-typing\", handleEndTyping);\n\n    socket.on(\"favourite\", handleFavourite);\n  };\n\n  const getChats = async () => {\n    try {\n      let [recent, favourite, group] = await Promise.all([\n        getChatByType(types.recent),\n        getChatByType(types.favourite),\n        getChatByType(types.group),\n      ]);\n      setChatList({\n        ...chatList,\n        recent: recent.data.data,\n        favourite: favourite.data.data,\n        group: group.data.data,\n      });\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClick = (id, type, index) => {\n    clearCount(type, index);\n    handleChat(id);\n  };\n\n  const clearCount = (type, index) => {\n    setChatList((prev) => {\n      const chats = { ...prev };\n      chats[type][index].count = 0;\n\n      return chats;\n    });\n  };\n\n  const handleMessage = ({\n    message: { msg, date, sender },\n    chat: { _id: chatId, group, favourites, user },\n    userId,\n  }) => {\n    let isGroupChat = !!group;\n\n    let message = {\n      msg,\n      date,\n      _id: chatId,\n      ...(isGroupChat\n        ? {\n            name: group.name,\n            avatar: group.avatar,\n            colorCode: group.colorCode,\n          }\n        : {\n            ...user,\n          }),\n    };\n\n    setChatList((prev) => {\n      let key = isGroupChat\n        ? \"group\"\n        : favourites.includes(userId)\n        ? \"favourite\"\n        : \"recent\";\n\n      let index = prev[key].findIndex(({ _id }) => {\n        return _id === chatId;\n      });\n\n      if (index === -1) {\n        message.count = 1;\n        return { ...prev, [key]: [message] };\n      }\n\n      let chats = [...prev[key]];\n      let [oldChat] = chats.splice(index, 1);\n\n      if (\n        chatId === sessionStorage.getItem(\"chatId\") ||\n        userId === sender._id\n      ) {\n        message.count = 0;\n      } else {\n        message.count = (oldChat.count || 0) + 1;\n      }\n      return {\n        ...prev,\n        [key]: [message, ...chats],\n      };\n    });\n  };\n\n  const handleFavourite = (data, isFavourite, isGroupChat) => {\n    setChatList((prev) => {\n      let key = isGroupChat ? \"group\" : \"recent\";\n      let chats = { ...prev };\n      if (isFavourite) {\n        chats.favourite.unshift(data);\n        let index = chats[key].findIndex(({ _id }) => {\n          return data._id === _id;\n        });\n        if (index < 0) return;\n        chats[key].splice(index, 1);\n      } else {\n        let index = chats.favourite.findIndex(({ _id }) => {\n          return data._id === _id;\n        });\n        if (index < 0) return;\n        chats.favourite.splice(index, 1);\n      }\n      return chats;\n    });\n  };\n\n  const handleStartTyping = (chatId, userName) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element\n      .querySelector(\"[typingstatus]\")\n      .setAttribute(\"typing\", `${userName.split(\" \")[0]} is typing...`);\n  };\n\n  const handleEndTyping = (chatId) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element.querySelector(\"[typingstatus]\").removeAttribute(\"typing\");\n  };\n\n  const handleChange = ({ target: { value } }) => {\n    setSearch(value.length === 0 ? \"\" : value);\n  };\n\n  const chats = useMemo(() => {\n    if (search.length === 0) return chatList;\n\n    return Object.entries(chatList).reduce((value, [key, chats]) => {\n      value[key] = chats.filter(({ name }) => {\n        return name.toLowerCase().includes(search.toLocaleLowerCase());\n      });\n      return value;\n    }, {});\n  }, [search, chatList]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <Fragment>\n      <SearchBox\n        title=\"Chats\"\n        placeholder=\"Search here...\"\n        onChange={handleChange}\n      />\n      {Object.entries(chats).map(([key, value], index) => {\n        return (\n          <ChatCard\n            key={index}\n            title={key}\n            list={value}\n            type={key}\n            chatId={chatId}\n            handleClick={handleClick}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default Chats;\n","import { axios } from \"services\";\nimport { endpoints } from \"./config\";\n\nexport const getChatByType = (type) => {\n  return axios({ url: `${endpoints.chat.list}/${type}`, method: \"get\" });\n};\n\nexport const getChatById = (chatId, params) => {\n  return axios({\n    url: `${endpoints.chat.chatDetails}/${chatId}`,\n    method: \"get\",\n    params,\n  });\n};\n\nexport const getChatMessagesByMsgId = (chatId, msgId, params) => {\n  return axios({\n    url: `${endpoints.chat.chatMessages}/${chatId}/${msgId}`,\n    method: \"get\",\n    params,\n  });\n};\n\nexport const addToFavourite = (chatId) => {\n  return axios({\n    url: `${endpoints.chat.addFavourite}/${chatId}`,\n    method: \"put\",\n  });\n};\n\nexport const removeFromFavourite = (chatId) => {\n  return axios({\n    url: `${endpoints.chat.removeFavourite}/${chatId}`,\n    method: \"delete\",\n  });\n};\n\nexport const markAsReadByMsgId = (chatId, msgId) => {\n  return axios({\n    url: `${endpoints.chat.markAsReadByMsgId}/${chatId}/${msgId}`,\n    method: \"put\",\n  });\n};\n\nexport const markAsRead = (chatId) => {\n  return axios({\n    url: `${endpoints.chat.markAsRead}/${chatId}`,\n    method: \"put\",\n  });\n};\n\nexport const sendReaction = (msgId, data) => {\n  return axios({\n    url: `${endpoints.chat.sendReaction}/${msgId}`,\n    method: \"post\",\n    data,\n  });\n};\n\nexport const getChatId = (userId) => {\n  return axios({ url: `${endpoints.chat.getChatId}/${userId}`, method: \"get\" });\n};\n\nexport const getChatMessageByRange = (chatId, params) => {\n  return axios({\n    url: `${endpoints.chat.chatMessageByRange}/${chatId}`,\n    method: \"get\",\n    params,\n  });\n};\n","import Axios from \"axios\";\nimport { cookies } from \"utils\";\nimport { baseURL } from \"./config\";\n\nexport const axios = Axios.create({ baseURL });\n\naxios.interceptors.request.use(\n  (config) => {\n    const cookie = cookies();\n\n    const token = cookie.get(\"auth_token\");\n    if (token) {\n      config.headers.Authorization = token;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      document.dispatchEvent(new CustomEvent(\"logout\"));\n    }\n    return Promise.reject(error?.response?.data);\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ChatCard_title__0n9Lv\",\"user_card\":\"ChatCard_user_card__8uDum\",\"active\":\"ChatCard_active__Gepsm\",\"user\":\"ChatCard_user__DAwIV\",\"msg\":\"ChatCard_msg__T-C59\",\"time\":\"ChatCard_time__H+Dke\",\"top\":\"ChatCard_top__cWzoa\"};"],"names":["title","list","handleClick","type","chatId","getDate","date","split","Date","toISOString","moment","format","Fragment","className","styles","padEnd","length","map","index","_id","count","msg","name","avatar","status","userId","colorCode","classNames","onClick","chatid","Avatar","src","size","typingstatus","types","useAuth","handleChat","useState","favourite","recent","group","chatList","setChatList","isLoading","setIsLoading","search","setSearch","useEffect","document","addEventListener","handleSocket","getChats","removeEventListener","socket","handleMessage","handleStartTyping","handleEndTyping","handleFavourite","Promise","all","getChatByType","data","Toast","message","id","clearCount","prev","chats","sender","chat","favourites","user","isGroupChat","key","includes","findIndex","splice","oldChat","sessionStorage","getItem","isFavourite","unshift","userName","element","querySelector","setAttribute","removeAttribute","useMemo","Object","entries","reduce","value","filter","toLowerCase","toLocaleLowerCase","SearchBox","placeholder","onChange","target","axios","url","endpoints","method","getChatById","params","getChatMessagesByMsgId","msgId","addToFavourite","removeFromFavourite","markAsReadByMsgId","markAsRead","sendReaction","getChatId","getChatMessageByRange","Axios","baseURL","interceptors","request","use","config","token","cookies","get","headers","Authorization","error","reject","response","dispatchEvent","CustomEvent"],"sourceRoot":""}