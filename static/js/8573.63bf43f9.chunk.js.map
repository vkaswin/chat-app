{"version":3,"file":"static/js/8573.63bf43f9.chunk.js","mappings":"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","sources":["pages/Chats/index.js","services/Chat.js","services/index.js","webpack://react-chat-app/./src/pages/Chats/Chats.module.scss?1b4d"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Avatar, Toast } from \"components\";\nimport { classNames } from \"utils\";\nimport { useAuth } from \"hooks\";\nimport { getChatByType } from \"services/Chat\";\nimport moment from \"moment\";\nimport { socket } from \"socket\";\n\nimport styles from \"./Chats.module.scss\";\n\nconst types = {\n  recent: \"recent\",\n  favourite: \"favourite\",\n  group: \"group\",\n};\n\nconst Chats = () => {\n  const { chatId, handleChat, user } = useAuth();\n\n  const [chatList, setChatList] = useState({\n    recent: [],\n    favourite: [],\n    group: [],\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { favourite, recent, group } = chatList;\n\n  useEffect(() => {\n    document.addEventListener(\"socket\", handleSocket);\n    getChats();\n    return () => {\n      document.removeEventListener(\"socket\", handleSocket);\n    };\n  }, []);\n\n  const handleSocket = () => {\n    socket.on(\"new-message\", handleNewMessage);\n\n    socket.on(\"start-typing\", handleStartTyping);\n\n    socket.on(\"end-typing\", handleEndTyping);\n  };\n\n  const getChats = async () => {\n    try {\n      let [recent, favourite, group] = await Promise.all([\n        getChatByType(types.recent),\n        getChatByType(types.favourite),\n        getChatByType(types.group),\n      ]);\n      setChatList({\n        ...chatList,\n        recent: recent.data.data,\n        favourite: favourite.data.data,\n        group: group.data.data,\n      });\n    } catch (error) {\n      Toast({ type: \"error\", message: error?.message });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClickOnChat = (id, type, index) => {\n    clearCount(type, index);\n    handleChat(id);\n  };\n\n  const clearCount = (type, index) => {\n    setChatList((prev) => {\n      const chats = { ...prev };\n      chats[type][index].count = 0;\n\n      return chats;\n    });\n  };\n\n  const handleNewMessage = (data, senderId, userId) => {\n    const chatId = sessionStorage.getItem(\"chatId\");\n\n    setChatList((prev) => {\n      const key = data.type;\n\n      const index = prev[key].findIndex(({ _id }) => {\n        return _id === data._id;\n      });\n\n      if (index === -1) {\n        data.count = 1;\n        return { ...prev, [key]: [data] };\n      }\n\n      const chats = [...prev[key]];\n      let [oldChat] = chats.splice(index, 1);\n\n      if (chatId === data._id || userId === senderId) {\n        data.count = 0;\n      } else {\n        data.count = (oldChat.count || 0) + 1;\n      }\n      return {\n        ...prev,\n        [key]: [data, ...chats],\n      };\n    });\n  };\n\n  const getDate = (date) => {\n    const isCurrentDate =\n      date.split(\"T\")[0] === new Date().toISOString().split(\"T\")[0];\n\n    return isCurrentDate\n      ? moment(date).format(\"h:mm a\")\n      : moment(date).format(\"DD/MM/YY\");\n  };\n\n  const handleStartTyping = (chatId, userName) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element\n      .querySelector(\"[typingstatus]\")\n      .setAttribute(\"typing\", `${userName.split(\" \")[0]} is typing...`);\n  };\n\n  const handleEndTyping = (chatId) => {\n    const element = document.querySelector(`[chatid='${chatId}']`);\n\n    if (!element) return;\n\n    element.querySelector(\"[typingstatus]\").removeAttribute(\"typing\");\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className={styles.chat_list_container}>\n      {favourite.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Favourites</b>\n          </div>\n          {favourite.map(\n            (\n              {\n                _id,\n                count,\n                latest: { msg, date },\n                user: { name, avatar, status, id },\n              },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleClickOnChat(_id, types.favourite, index)}\n                  chatid={_id}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={id}\n                    />\n                    <div className={styles.msg} typingstatus=\"\">\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {recent.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Recent Chats</b>\n          </div>\n          {recent.map(\n            (\n              {\n                _id,\n                count,\n                latest: { msg, date },\n                user: { name, avatar, status, id },\n              },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleClickOnChat(_id, types.recent, index)}\n                  chatid={_id}\n                >\n                  <div className={styles.user}>\n                    <Avatar\n                      src={avatar}\n                      name={name}\n                      status={status}\n                      size={35}\n                      userId={id}\n                    />\n                    <div className={styles.msg} typingstatus=\"\">\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n      {group.length > 0 && (\n        <Fragment>\n          <div className={styles.title}>\n            <b>Groups</b>\n            <button>\n              <i className=\"bx-plus\"></i>\n            </button>\n          </div>\n          {group.map(\n            (\n              { _id, count, latest: { msg, date }, group: { name, avatar } },\n              index\n            ) => {\n              return (\n                <div\n                  key={index}\n                  className={classNames(styles.user_card, {\n                    [styles.active]: _id === chatId,\n                  })}\n                  onClick={() => handleClickOnChat(_id, types.group, index)}\n                  chatid={_id}\n                >\n                  <div className={styles.user}>\n                    <Avatar src={avatar} name={name} size={35} />\n                    <div className={styles.msg} typingstatus=\"\">\n                      <span className=\"truncate-1\">{name}</span>\n                      <span className=\"truncate-1\">{msg}</span>\n                    </div>\n                  </div>\n                  <div\n                    className={classNames(styles.time, {\n                      [styles.top]: !count,\n                    })}\n                  >\n                    <span>{getDate(date)}</span>\n                    {count > 0 && <label>{count}</label>}\n                  </div>\n                </div>\n              );\n            }\n          )}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Chats;\n","import { axios } from \"services\";\nimport { endpoints } from \"config\";\n\nexport const getChatByType = (type) => {\n  return axios({ url: `${endpoints.chat.list}/${type}`, method: \"get\" });\n};\n\nexport const getChatById = (chatId) => {\n  return axios({\n    url: `${endpoints.chat.chatDetails}/${chatId}`,\n    method: \"get\",\n  });\n};\n\nexport const addToFavourite = (chatId) => {\n  return axios({ url: endpoints.chat.addFavourite, method: \"put\" });\n};\n\nexport const removeFromFavourite = (chatId) => {\n  return axios({ url: endpoints.chat.removeFavourite, method: \"delete\" });\n};\n\nexport const markAsRead = (chatId, data) => {\n  return axios({\n    url: `${endpoints.chat.markAsRead}/${chatId}`,\n    method: \"put\",\n    data,\n  });\n};\n","import Axios from \"axios\";\nimport { cookies } from \"utils\";\nimport { baseURL } from \"config\";\n\nexport const axios = Axios.create({ baseURL });\n\naxios.interceptors.request.use(\n  (config) => {\n    const cookie = cookies();\n\n    const token = cookie.get(\"authToken\");\n    if (token) {\n      config.headers.Authorization = token;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      document.dispatchEvent(new CustomEvent(\"logout\"));\n    }\n    return Promise.reject(error?.response?.data);\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"chat_list_container\":\"Chats_chat_list_container__Lo8ht\",\"title\":\"Chats_title__ncpOR\",\"user_card\":\"Chats_user_card__m+jOS\",\"active\":\"Chats_active__07HzW\",\"user\":\"Chats_user__LeGpu\",\"msg\":\"Chats_msg__y5EF6\",\"time\":\"Chats_time__hAPQQ\",\"top\":\"Chats_top__dpX3P\"};"],"names":["types","useAuth","chatId","handleChat","user","useState","recent","favourite","group","chatList","setChatList","isLoading","setIsLoading","useEffect","document","addEventListener","handleSocket","getChats","removeEventListener","socket","handleNewMessage","handleStartTyping","handleEndTyping","Promise","all","getChatByType","data","Toast","type","message","handleClickOnChat","id","index","clearCount","prev","chats","count","senderId","userId","sessionStorage","getItem","key","findIndex","_id","splice","oldChat","getDate","date","split","Date","toISOString","moment","format","userName","element","querySelector","setAttribute","removeAttribute","className","styles","length","Fragment","map","latest","msg","name","avatar","status","classNames","onClick","chatid","Avatar","src","size","typingstatus","axios","url","endpoints","method","getChatById","addToFavourite","removeFromFavourite","markAsRead","Axios","baseURL","interceptors","request","use","config","token","cookies","get","headers","Authorization","error","reject","response","dispatchEvent","CustomEvent"],"sourceRoot":""}